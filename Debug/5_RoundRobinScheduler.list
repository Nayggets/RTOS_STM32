
5_RoundRobinScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001708  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080018a8  080018a8  000118a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019a0  080019a0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080019a0  080019a0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019a0  080019a0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019a0  080019a0  000119a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019a4  080019a4  000119a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080019a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000131c  20000064  08001a0c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001380  08001a0c  00021380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001688  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000702  00000000  00000000  0002171c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00021e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  00021ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020aa  00000000  00000000  00022178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021f6  00000000  00000000  00024222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000558f7  00000000  00000000  00026418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007bd0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000db0  00000000  00000000  0007bd60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001890 	.word	0x08001890

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001890 	.word	0x08001890

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <motor_run>:
#include <stdio.h>
#include "osKernel.h"

#define QUANTUM 2
void motor_run()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	printf("motor run ------->\n\r");
 8000284:	4802      	ldr	r0, [pc, #8]	; (8000290 <motor_run+0x10>)
 8000286:	f000 fb75 	bl	8000974 <iprintf>
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	080018a8 	.word	0x080018a8

08000294 <valve_open>:

void valve_open()
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	printf("valve open ------->\n\r");
 8000298:	4802      	ldr	r0, [pc, #8]	; (80002a4 <valve_open+0x10>)
 800029a:	f000 fb6b 	bl	8000974 <iprintf>
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	080018c0 	.word	0x080018c0

080002a8 <task0>:

typedef uint32_t TaskProfiler;
TaskProfiler Task0_profiler,Task1_profiler,Task2_profiler;

void task0()
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	while(1)
	{
		Task0_profiler++;
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <task0+0x14>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	3301      	adds	r3, #1
 80002b2:	4a02      	ldr	r2, [pc, #8]	; (80002bc <task0+0x14>)
 80002b4:	6013      	str	r3, [r2, #0]
		motor_run();
 80002b6:	f7ff ffe3 	bl	8000280 <motor_run>
		Task0_profiler++;
 80002ba:	e7f7      	b.n	80002ac <task0+0x4>
 80002bc:	20000080 	.word	0x20000080

080002c0 <task1>:
	}
}

void task1()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	while(1)
	{
		Task1_profiler++;
 80002c4:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <task1+0x14>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3301      	adds	r3, #1
 80002ca:	4a02      	ldr	r2, [pc, #8]	; (80002d4 <task1+0x14>)
 80002cc:	6013      	str	r3, [r2, #0]
		valve_open();
 80002ce:	f7ff ffe1 	bl	8000294 <valve_open>
		Task1_profiler++;
 80002d2:	e7f7      	b.n	80002c4 <task1+0x4>
 80002d4:	20000084 	.word	0x20000084

080002d8 <task2>:
	}
}

void task2()
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2_profiler++;
 80002dc:	4b02      	ldr	r3, [pc, #8]	; (80002e8 <task2+0x10>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	3301      	adds	r3, #1
 80002e2:	4a01      	ldr	r2, [pc, #4]	; (80002e8 <task2+0x10>)
 80002e4:	6013      	str	r3, [r2, #0]
 80002e6:	e7f9      	b.n	80002dc <task2+0x4>
 80002e8:	20000088 	.word	0x20000088

080002ec <main>:
	}
}

int main()
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	uart_tx_init();
 80002f0:	f000 fa5a 	bl	80007a8 <uart_tx_init>
	//initialise kernel
	osKernelInit();
 80002f4:	f000 f946 	bl	8000584 <osKernelInit>
	/*Add Thread*/
	osKernelAddThread(&task0,&task1,&task2);
 80002f8:	4a04      	ldr	r2, [pc, #16]	; (800030c <main+0x20>)
 80002fa:	4905      	ldr	r1, [pc, #20]	; (8000310 <main+0x24>)
 80002fc:	4805      	ldr	r0, [pc, #20]	; (8000314 <main+0x28>)
 80002fe:	f000 f905 	bl	800050c <osKernelAddThread>
	/*Set RoundRobin time quanta*/
	osKernelLaunch(QUANTUM);
 8000302:	2002      	movs	r0, #2
 8000304:	f000 f94c 	bl	80005a0 <osKernelLaunch>
	while(1)
 8000308:	e7fe      	b.n	8000308 <main+0x1c>
 800030a:	bf00      	nop
 800030c:	080002d9 	.word	0x080002d9
 8000310:	080002c1 	.word	0x080002c1
 8000314:	080002a9 	.word	0x080002a9

08000318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	6039      	str	r1, [r7, #0]
 8000322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000328:	2b00      	cmp	r3, #0
 800032a:	db0a      	blt.n	8000342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	b2da      	uxtb	r2, r3
 8000330:	490c      	ldr	r1, [pc, #48]	; (8000364 <__NVIC_SetPriority+0x4c>)
 8000332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000336:	0112      	lsls	r2, r2, #4
 8000338:	b2d2      	uxtb	r2, r2
 800033a:	440b      	add	r3, r1
 800033c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000340:	e00a      	b.n	8000358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	b2da      	uxtb	r2, r3
 8000346:	4908      	ldr	r1, [pc, #32]	; (8000368 <__NVIC_SetPriority+0x50>)
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	f003 030f 	and.w	r3, r3, #15
 800034e:	3b04      	subs	r3, #4
 8000350:	0112      	lsls	r2, r2, #4
 8000352:	b2d2      	uxtb	r2, r2
 8000354:	440b      	add	r3, r1
 8000356:	761a      	strb	r2, [r3, #24]
}
 8000358:	bf00      	nop
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	e000e100 	.word	0xe000e100
 8000368:	e000ed00 	.word	0xe000ed00

0800036c <osKernelStackInit>:

void osSchedulerLaunch();


void osKernelStackInit(int i)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	tcbs[i].stackPt = &TCB_STACK[i][STACKSIZE - 16];
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800037a:	fb02 f303 	mul.w	r3, r2, r3
 800037e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000382:	4a60      	ldr	r2, [pc, #384]	; (8000504 <osKernelStackInit+0x198>)
 8000384:	441a      	add	r2, r3
 8000386:	4960      	ldr	r1, [pc, #384]	; (8000508 <osKernelStackInit+0x19c>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	/*set Bit21 to one (T-BIT)*/
	TCB_STACK[i][STACKSIZE-1] = (1U<<24);
 800038e:	4a5d      	ldr	r2, [pc, #372]	; (8000504 <osKernelStackInit+0x198>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000396:	fb01 f303 	mul.w	r3, r1, r3
 800039a:	4413      	add	r3, r2
 800039c:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 80003a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003a4:	601a      	str	r2, [r3, #0]

	/*Block below is optionnal, for debugging purpose only*/

	TCB_STACK[i][STACKSIZE-3] = 0xAAAAAAAA; // R14
 80003a6:	4a57      	ldr	r2, [pc, #348]	; (8000504 <osKernelStackInit+0x198>)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80003ae:	fb01 f303 	mul.w	r3, r1, r3
 80003b2:	4413      	add	r3, r2
 80003b4:	f203 6334 	addw	r3, r3, #1588	; 0x634
 80003b8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003bc:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-4] = 0xAAAAAAAA; // R12
 80003be:	4a51      	ldr	r2, [pc, #324]	; (8000504 <osKernelStackInit+0x198>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80003c6:	fb01 f303 	mul.w	r3, r1, r3
 80003ca:	4413      	add	r3, r2
 80003cc:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 80003d0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003d4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-5] = 0xAAAAAAAA; // R3
 80003d6:	4a4b      	ldr	r2, [pc, #300]	; (8000504 <osKernelStackInit+0x198>)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80003de:	fb01 f303 	mul.w	r3, r1, r3
 80003e2:	4413      	add	r3, r2
 80003e4:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80003e8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003ec:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-6] = 0xAAAAAAAA; // R2
 80003ee:	4a45      	ldr	r2, [pc, #276]	; (8000504 <osKernelStackInit+0x198>)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80003f6:	fb01 f303 	mul.w	r3, r1, r3
 80003fa:	4413      	add	r3, r2
 80003fc:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8000400:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000404:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-7] = 0xAAAAAAAA; // R1
 8000406:	4a3f      	ldr	r2, [pc, #252]	; (8000504 <osKernelStackInit+0x198>)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800040e:	fb01 f303 	mul.w	r3, r1, r3
 8000412:	4413      	add	r3, r2
 8000414:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8000418:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800041c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-8] = 0xAAAAAAAA; // R0
 800041e:	4a39      	ldr	r2, [pc, #228]	; (8000504 <osKernelStackInit+0x198>)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000426:	fb01 f303 	mul.w	r3, r1, r3
 800042a:	4413      	add	r3, r2
 800042c:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8000430:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000434:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-9] = 0xAAAAAAAA; // R11
 8000436:	4a33      	ldr	r2, [pc, #204]	; (8000504 <osKernelStackInit+0x198>)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800043e:	fb01 f303 	mul.w	r3, r1, r3
 8000442:	4413      	add	r3, r2
 8000444:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8000448:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800044c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-10] = 0xAAAAAAAA; // R10
 800044e:	4a2d      	ldr	r2, [pc, #180]	; (8000504 <osKernelStackInit+0x198>)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000456:	fb01 f303 	mul.w	r3, r1, r3
 800045a:	4413      	add	r3, r2
 800045c:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8000460:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000464:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-11] = 0xAAAAAAAA; // R9
 8000466:	4a27      	ldr	r2, [pc, #156]	; (8000504 <osKernelStackInit+0x198>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800046e:	fb01 f303 	mul.w	r3, r1, r3
 8000472:	4413      	add	r3, r2
 8000474:	f203 6314 	addw	r3, r3, #1556	; 0x614
 8000478:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800047c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-12] = 0xAAAAAAAA; // R8
 800047e:	4a21      	ldr	r2, [pc, #132]	; (8000504 <osKernelStackInit+0x198>)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000486:	fb01 f303 	mul.w	r3, r1, r3
 800048a:	4413      	add	r3, r2
 800048c:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8000490:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000494:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-13] = 0xAAAAAAAA; // R7
 8000496:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <osKernelStackInit+0x198>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800049e:	fb01 f303 	mul.w	r3, r1, r3
 80004a2:	4413      	add	r3, r2
 80004a4:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80004a8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004ac:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-14] = 0xAAAAAAAA; // R6
 80004ae:	4a15      	ldr	r2, [pc, #84]	; (8000504 <osKernelStackInit+0x198>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80004b6:	fb01 f303 	mul.w	r3, r1, r3
 80004ba:	4413      	add	r3, r2
 80004bc:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80004c0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004c4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-15] = 0xAAAAAAAA; // R5
 80004c6:	4a0f      	ldr	r2, [pc, #60]	; (8000504 <osKernelStackInit+0x198>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80004ce:	fb01 f303 	mul.w	r3, r1, r3
 80004d2:	4413      	add	r3, r2
 80004d4:	f203 6304 	addw	r3, r3, #1540	; 0x604
 80004d8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004dc:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-16] = 0xAAAAAAAA; // R4
 80004de:	4a09      	ldr	r2, [pc, #36]	; (8000504 <osKernelStackInit+0x198>)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80004e6:	fb01 f303 	mul.w	r3, r1, r3
 80004ea:	4413      	add	r3, r2
 80004ec:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80004f0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004f4:	601a      	str	r2, [r3, #0]


}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	200000ac 	.word	0x200000ac
 8000508:	20000090 	.word	0x20000090

0800050c <osKernelAddThread>:


uint8_t osKernelAddThread(void(*task0)(void),void(*task1)(void),void(*task2)(void))
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
	__disable_irq();
	tcbs[0].nextPt = &tcbs[1];
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <osKernelAddThread+0x64>)
 800051e:	4a15      	ldr	r2, [pc, #84]	; (8000574 <osKernelAddThread+0x68>)
 8000520:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt = &tcbs[2];
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <osKernelAddThread+0x64>)
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <osKernelAddThread+0x6c>)
 8000526:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt = &tcbs[0];
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <osKernelAddThread+0x64>)
 800052a:	4a11      	ldr	r2, [pc, #68]	; (8000570 <osKernelAddThread+0x64>)
 800052c:	615a      	str	r2, [r3, #20]

	//initial thread stack
	//thread 0
	osKernelStackInit(0);
 800052e:	2000      	movs	r0, #0
 8000530:	f7ff ff1c 	bl	800036c <osKernelStackInit>
	TCB_STACK[0][STACKSIZE-2] = (uint32_t)(task0);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a11      	ldr	r2, [pc, #68]	; (800057c <osKernelAddThread+0x70>)
 8000538:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638

	//thread 1
	osKernelStackInit(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f7ff ff15 	bl	800036c <osKernelStackInit>
	TCB_STACK[1][STACKSIZE-2] = (uint32_t)(task1);
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <osKernelAddThread+0x70>)
 8000546:	f8c2 3c78 	str.w	r3, [r2, #3192]	; 0xc78

	//thread 2
	osKernelStackInit(2);
 800054a:	2002      	movs	r0, #2
 800054c:	f7ff ff0e 	bl	800036c <osKernelStackInit>
	TCB_STACK[2][STACKSIZE-2] = (uint32_t)(task2);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <osKernelAddThread+0x70>)
 8000554:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000558:	f8c2 32b8 	str.w	r3, [r2, #696]	; 0x2b8

	currentPt = &tcbs[0];
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <osKernelAddThread+0x74>)
 800055e:	4a04      	ldr	r2, [pc, #16]	; (8000570 <osKernelAddThread+0x64>)
 8000560:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000562:	b662      	cpsie	i
}
 8000564:	bf00      	nop

	__enable_irq();

	return 1;
 8000566:	2301      	movs	r3, #1

}
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000090 	.word	0x20000090
 8000574:	20000098 	.word	0x20000098
 8000578:	200000a0 	.word	0x200000a0
 800057c:	200000ac 	.word	0x200000ac
 8000580:	200000a8 	.word	0x200000a8

08000584 <osKernelInit>:

void osKernelInit()
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER = (BUS_FREQ/1000);
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <osKernelInit+0x18>)
 800058a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000008c 	.word	0x2000008c

080005a0 <osKernelLaunch>:

void osKernelLaunch(uint32_t quantum)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	/*reset systick*/
	SysTick->CTRL = SYSTICK_RST;
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <osKernelLaunch+0x4c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
	/*clear systick current value register*/
	SysTick->VAL = 0;
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <osKernelLaunch+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
	/*Load Quantum*/
	SysTick->LOAD = (quantum * MILLIS_PRESCALER);
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <osKernelLaunch+0x50>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	490c      	ldr	r1, [pc, #48]	; (80005ec <osKernelLaunch+0x4c>)
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	fb02 f303 	mul.w	r3, r2, r3
 80005c0:	604b      	str	r3, [r1, #4]
	/*set systick to a low priority*/
	NVIC_SetPriority(SysTick_IRQn,15);
 80005c2:	210f      	movs	r1, #15
 80005c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005c8:	f7ff fea6 	bl	8000318 <__NVIC_SetPriority>
	/*Enable systick select internal clock*/
	SysTick->CTRL = CTRL_CLCKSRC | CTRL_ENABLE;
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <osKernelLaunch+0x4c>)
 80005ce:	2205      	movs	r2, #5
 80005d0:	601a      	str	r2, [r3, #0]
	/*Enable systick interupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <osKernelLaunch+0x4c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a05      	ldr	r2, [pc, #20]	; (80005ec <osKernelLaunch+0x4c>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	6013      	str	r3, [r2, #0]
	/*Launch scheduler*/
	osSchedulerLaunch();
 80005de:	f000 f81b 	bl	8000618 <osSchedulerLaunch>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	e000e010 	.word	0xe000e010
 80005f0:	2000008c 	.word	0x2000008c

080005f4 <SysTick_Handler>:
 *saved onto the stack,r1,r2,r3,r12,lr,pc,psr*/
__attribute__((naked)) void SysTick_Handler(void)
{
	/*Susend Current Thread*/
	/*Disable global interrupt*/
	__asm("CPSID	I");
 80005f4:	b672      	cpsid	i
	/*Save r4,r5,r6,r7,r8,r9,r10,r11*/
	__asm("PUSH {R4-R11}");
 80005f6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	/*load address of currentPt into r0*/
	__asm("LDR R0,=currentPt");
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <SysTick_Handler+0x20>)
	/*Load r1 from address equals r0*/
	__asm("LDR R1,[R0]");
 80005fc:	6801      	ldr	r1, [r0, #0]

	/*Store Cortex-m SP at address equals r1, .e Save SP into tcb*/
	__asm("STR SP,[R1]");
 80005fe:	f8c1 d000 	str.w	sp, [r1]
	/*Choose Next Thread*/

	/*Load r1 from a location 4bytes above address r1 r1 = currentPt->next*/
	__asm("LDR R1,[R1,#4]");
 8000602:	6849      	ldr	r1, [r1, #4]

	/*Store R1 at address equal r0, i.e currentPt = r1*/
	__asm("STR R1,[R0]");
 8000604:	6001      	str	r1, [r0, #0]

	/*load cortex-m SP from address equals r1 i.e SP = currentPt->stackPt*/
	__asm("LDR SP,[R1]");
 8000606:	f8d1 d000 	ldr.w	sp, [r1]

	/*Restore R4-R11*/
	__asm("POP {R4-R11}");
 800060a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Enable global interrupts*/
	__asm("CPSIE	I");
 800060e:	b662      	cpsie	i

	/*Return from exception and restore r0,r1,r2,r3,r12,lr,pc,psr*/
	__asm("BX	LR");
 8000610:	4770      	bx	lr


}
 8000612:	bf00      	nop
 8000614:	200000a8 	.word	0x200000a8

08000618 <osSchedulerLaunch>:

void osSchedulerLaunch()
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
	/*Load address of currentPt into R0*/
	__asm("LDR R0,=currentPt");
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <osSchedulerLaunch+0x2c>)
	/*Load r2 from address equals r0, r2 = currentPt*/
	__asm("LDR R2,[r0]");
 800061e:	6802      	ldr	r2, [r0, #0]
	/*Load Cortex-M SP from address equals R2, i.e SP = currentPt->stackPt*/
	__asm("LDR	SP,[R2]");
 8000620:	f8d2 d000 	ldr.w	sp, [r2]

	/*Restore r4,r5,r6,r7,r8,r9,r10,r11*/
	__asm("POP {R4-R11}");
 8000624:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}


	/*REstore r12*/
	__asm("POP {R12}");
 8000628:	f85d cb04 	ldr.w	ip, [sp], #4


	/*Restore r0,r1,r2,r3*/
	__asm("POP {R0-R3}");
 800062c:	bc0f      	pop	{r0, r1, r2, r3}



	/*skip LR*/
	__asm("ADD SP,SP,#4");
 800062e:	b001      	add	sp, #4

	/*Create a new start location by popping LR*/
	__asm("POP {LR}");
 8000630:	f85d eb04 	ldr.w	lr, [sp], #4

	/*skip PSR*/
	__asm("ADD SP,SP,#4");
 8000634:	b001      	add	sp, #4

	/*Enable global interrupts*/
	__asm("CPSIE	I");
 8000636:	b662      	cpsie	i

	/*return from the exception*/
	__asm("BX	LR");
 8000638:	4770      	bx	lr

}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	200000a8 	.word	0x200000a8

08000648 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	e00a      	b.n	8000670 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800065a:	f3af 8000 	nop.w
 800065e:	4601      	mov	r1, r0
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	60ba      	str	r2, [r7, #8]
 8000666:	b2ca      	uxtb	r2, r1
 8000668:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	3301      	adds	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	697a      	ldr	r2, [r7, #20]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	429a      	cmp	r2, r3
 8000676:	dbf0      	blt.n	800065a <_read+0x12>
  }

  return len;
 8000678:	687b      	ldr	r3, [r7, #4]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b086      	sub	sp, #24
 8000686:	af00      	add	r7, sp, #0
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	e009      	b.n	80006a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	60ba      	str	r2, [r7, #8]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f877 	bl	8000790 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	3301      	adds	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dbf1      	blt.n	8000694 <_write+0x12>
  }
  return len;
 80006b0:	687b      	ldr	r3, [r7, #4]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <_close>:

int _close(int file)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e2:	605a      	str	r2, [r3, #4]
  return 0;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <_isatty>:

int _isatty(int file)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800072c:	4a14      	ldr	r2, [pc, #80]	; (8000780 <_sbrk+0x5c>)
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <_sbrk+0x60>)
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <_sbrk+0x64>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d102      	bne.n	8000746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <_sbrk+0x64>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <_sbrk+0x68>)
 8000744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <_sbrk+0x64>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	429a      	cmp	r2, r3
 8000752:	d207      	bcs.n	8000764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000754:	f000 f8dc 	bl	8000910 <__errno>
 8000758:	4603      	mov	r3, r0
 800075a:	220c      	movs	r2, #12
 800075c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800075e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000762:	e009      	b.n	8000778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <_sbrk+0x64>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <_sbrk+0x64>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	4a05      	ldr	r2, [pc, #20]	; (8000788 <_sbrk+0x64>)
 8000774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000776:	68fb      	ldr	r3, [r7, #12]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20020000 	.word	0x20020000
 8000784:	00000400 	.word	0x00000400
 8000788:	2000136c 	.word	0x2000136c
 800078c:	20001380 	.word	0x20001380

08000790 <__io_putchar>:
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);

static void uart_write(int ch);

int __io_putchar(int ch)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 f84f 	bl	800083c <uart_write>
	return ch;
 800079e:	687b      	ldr	r3, [r7, #4]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <uart_tx_init>:

void uart_tx_init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <uart_tx_init+0x84>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	4a1e      	ldr	r2, [pc, #120]	; (800082c <uart_tx_init+0x84>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &= ~(1U<<4);
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <uart_tx_init+0x88>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <uart_tx_init+0x88>)
 80007be:	f023 0310 	bic.w	r3, r3, #16
 80007c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <uart_tx_init+0x88>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a19      	ldr	r2, [pc, #100]	; (8000830 <uart_tx_init+0x88>)
 80007ca:	f043 0320 	orr.w	r3, r3, #32
 80007ce:	6013      	str	r3, [r2, #0]
	/*Set alternate function type to AF7 (UART2_TX)*/
	GPIOA->AFR[0] &= ~(1U<<11);
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <uart_tx_init+0x88>)
 80007d2:	6a1b      	ldr	r3, [r3, #32]
 80007d4:	4a16      	ldr	r2, [pc, #88]	; (8000830 <uart_tx_init+0x88>)
 80007d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007da:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <uart_tx_init+0x88>)
 80007de:	6a1b      	ldr	r3, [r3, #32]
 80007e0:	4a13      	ldr	r2, [pc, #76]	; (8000830 <uart_tx_init+0x88>)
 80007e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007e6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <uart_tx_init+0x88>)
 80007ea:	6a1b      	ldr	r3, [r3, #32]
 80007ec:	4a10      	ldr	r2, [pc, #64]	; (8000830 <uart_tx_init+0x88>)
 80007ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<8);
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <uart_tx_init+0x88>)
 80007f6:	6a1b      	ldr	r3, [r3, #32]
 80007f8:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <uart_tx_init+0x88>)
 80007fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007fe:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART*/
	RCC->APB1ENR |= UART2EN;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <uart_tx_init+0x84>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	4a09      	ldr	r2, [pc, #36]	; (800082c <uart_tx_init+0x84>)
 8000806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080a:	6413      	str	r3, [r2, #64]	; 0x40
	/*Configure baudrate*/
	uart_set_baudrate(APB1_CLK,UART_BAUDRATE);
 800080c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000810:	4808      	ldr	r0, [pc, #32]	; (8000834 <uart_tx_init+0x8c>)
 8000812:	f000 f82b 	bl	800086c <uart_set_baudrate>
	/*Configure transfer direction*/
	USART2->CR1 = CR1_TE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <uart_tx_init+0x90>)
 8000818:	2208      	movs	r2, #8
 800081a:	60da      	str	r2, [r3, #12]
	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <uart_tx_init+0x90>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4a05      	ldr	r2, [pc, #20]	; (8000838 <uart_tx_init+0x90>)
 8000822:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000826:	60d3      	str	r3, [r2, #12]

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000
 8000834:	00f42400 	.word	0x00f42400
 8000838:	40004400 	.word	0x40004400

0800083c <uart_write>:

static void uart_write(int ch)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & SR_TXE)){}
 8000844:	bf00      	nop
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <uart_write+0x2c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0f9      	beq.n	8000846 <uart_write+0xa>

	USART2->DR = (ch & 0xFF);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <uart_write+0x2c>)
 8000856:	b2db      	uxtb	r3, r3
 8000858:	6053      	str	r3, [r2, #4]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40004400 	.word	0x40004400

0800086c <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000876:	6839      	ldr	r1, [r7, #0]
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f000 f80b 	bl	8000894 <compute_uart_bd>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	4b03      	ldr	r3, [pc, #12]	; (8000890 <uart_set_baudrate+0x24>)
 8000884:	609a      	str	r2, [r3, #8]
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40004400 	.word	0x40004400

08000894 <compute_uart_bd>:


static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	 return ((periph_clk + (baudrate/2U))/baudrate);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	085a      	lsrs	r2, r3, #1
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	441a      	add	r2, r3
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ac:	b29b      	uxth	r3, r3
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c4:	480c      	ldr	r0, [pc, #48]	; (80008f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008c6:	490d      	ldr	r1, [pc, #52]	; (80008fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c8:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <LoopForever+0xe>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008dc:	4c0a      	ldr	r4, [pc, #40]	; (8000908 <LoopForever+0x16>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ea:	f000 f817 	bl	800091c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ee:	f7ff fcfd 	bl	80002ec <main>

080008f2 <LoopForever>:

LoopForever:
  b LoopForever
 80008f2:	e7fe      	b.n	80008f2 <LoopForever>
  ldr   r0, =_estack
 80008f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000900:	080019a8 	.word	0x080019a8
  ldr r2, =_sbss
 8000904:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000908:	20001380 	.word	0x20001380

0800090c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC_IRQHandler>
	...

08000910 <__errno>:
 8000910:	4b01      	ldr	r3, [pc, #4]	; (8000918 <__errno+0x8>)
 8000912:	6818      	ldr	r0, [r3, #0]
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000000 	.word	0x20000000

0800091c <__libc_init_array>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	4d0d      	ldr	r5, [pc, #52]	; (8000954 <__libc_init_array+0x38>)
 8000920:	4c0d      	ldr	r4, [pc, #52]	; (8000958 <__libc_init_array+0x3c>)
 8000922:	1b64      	subs	r4, r4, r5
 8000924:	10a4      	asrs	r4, r4, #2
 8000926:	2600      	movs	r6, #0
 8000928:	42a6      	cmp	r6, r4
 800092a:	d109      	bne.n	8000940 <__libc_init_array+0x24>
 800092c:	4d0b      	ldr	r5, [pc, #44]	; (800095c <__libc_init_array+0x40>)
 800092e:	4c0c      	ldr	r4, [pc, #48]	; (8000960 <__libc_init_array+0x44>)
 8000930:	f000 ffae 	bl	8001890 <_init>
 8000934:	1b64      	subs	r4, r4, r5
 8000936:	10a4      	asrs	r4, r4, #2
 8000938:	2600      	movs	r6, #0
 800093a:	42a6      	cmp	r6, r4
 800093c:	d105      	bne.n	800094a <__libc_init_array+0x2e>
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f855 3b04 	ldr.w	r3, [r5], #4
 8000944:	4798      	blx	r3
 8000946:	3601      	adds	r6, #1
 8000948:	e7ee      	b.n	8000928 <__libc_init_array+0xc>
 800094a:	f855 3b04 	ldr.w	r3, [r5], #4
 800094e:	4798      	blx	r3
 8000950:	3601      	adds	r6, #1
 8000952:	e7f2      	b.n	800093a <__libc_init_array+0x1e>
 8000954:	080019a0 	.word	0x080019a0
 8000958:	080019a0 	.word	0x080019a0
 800095c:	080019a0 	.word	0x080019a0
 8000960:	080019a4 	.word	0x080019a4

08000964 <memset>:
 8000964:	4402      	add	r2, r0
 8000966:	4603      	mov	r3, r0
 8000968:	4293      	cmp	r3, r2
 800096a:	d100      	bne.n	800096e <memset+0xa>
 800096c:	4770      	bx	lr
 800096e:	f803 1b01 	strb.w	r1, [r3], #1
 8000972:	e7f9      	b.n	8000968 <memset+0x4>

08000974 <iprintf>:
 8000974:	b40f      	push	{r0, r1, r2, r3}
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <iprintf+0x2c>)
 8000978:	b513      	push	{r0, r1, r4, lr}
 800097a:	681c      	ldr	r4, [r3, #0]
 800097c:	b124      	cbz	r4, 8000988 <iprintf+0x14>
 800097e:	69a3      	ldr	r3, [r4, #24]
 8000980:	b913      	cbnz	r3, 8000988 <iprintf+0x14>
 8000982:	4620      	mov	r0, r4
 8000984:	f000 f866 	bl	8000a54 <__sinit>
 8000988:	ab05      	add	r3, sp, #20
 800098a:	9a04      	ldr	r2, [sp, #16]
 800098c:	68a1      	ldr	r1, [r4, #8]
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	4620      	mov	r0, r4
 8000992:	f000 f9bd 	bl	8000d10 <_vfiprintf_r>
 8000996:	b002      	add	sp, #8
 8000998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800099c:	b004      	add	sp, #16
 800099e:	4770      	bx	lr
 80009a0:	20000000 	.word	0x20000000

080009a4 <std>:
 80009a4:	2300      	movs	r3, #0
 80009a6:	b510      	push	{r4, lr}
 80009a8:	4604      	mov	r4, r0
 80009aa:	e9c0 3300 	strd	r3, r3, [r0]
 80009ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009b2:	6083      	str	r3, [r0, #8]
 80009b4:	8181      	strh	r1, [r0, #12]
 80009b6:	6643      	str	r3, [r0, #100]	; 0x64
 80009b8:	81c2      	strh	r2, [r0, #14]
 80009ba:	6183      	str	r3, [r0, #24]
 80009bc:	4619      	mov	r1, r3
 80009be:	2208      	movs	r2, #8
 80009c0:	305c      	adds	r0, #92	; 0x5c
 80009c2:	f7ff ffcf 	bl	8000964 <memset>
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <std+0x38>)
 80009c8:	6263      	str	r3, [r4, #36]	; 0x24
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <std+0x3c>)
 80009cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <std+0x40>)
 80009d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <std+0x44>)
 80009d4:	6224      	str	r4, [r4, #32]
 80009d6:	6323      	str	r3, [r4, #48]	; 0x30
 80009d8:	bd10      	pop	{r4, pc}
 80009da:	bf00      	nop
 80009dc:	080012b9 	.word	0x080012b9
 80009e0:	080012db 	.word	0x080012db
 80009e4:	08001313 	.word	0x08001313
 80009e8:	08001337 	.word	0x08001337

080009ec <_cleanup_r>:
 80009ec:	4901      	ldr	r1, [pc, #4]	; (80009f4 <_cleanup_r+0x8>)
 80009ee:	f000 b8af 	b.w	8000b50 <_fwalk_reent>
 80009f2:	bf00      	nop
 80009f4:	08001611 	.word	0x08001611

080009f8 <__sfmoreglue>:
 80009f8:	b570      	push	{r4, r5, r6, lr}
 80009fa:	2268      	movs	r2, #104	; 0x68
 80009fc:	1e4d      	subs	r5, r1, #1
 80009fe:	4355      	muls	r5, r2
 8000a00:	460e      	mov	r6, r1
 8000a02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a06:	f000 f8e5 	bl	8000bd4 <_malloc_r>
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	b140      	cbz	r0, 8000a20 <__sfmoreglue+0x28>
 8000a0e:	2100      	movs	r1, #0
 8000a10:	e9c0 1600 	strd	r1, r6, [r0]
 8000a14:	300c      	adds	r0, #12
 8000a16:	60a0      	str	r0, [r4, #8]
 8000a18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000a1c:	f7ff ffa2 	bl	8000964 <memset>
 8000a20:	4620      	mov	r0, r4
 8000a22:	bd70      	pop	{r4, r5, r6, pc}

08000a24 <__sfp_lock_acquire>:
 8000a24:	4801      	ldr	r0, [pc, #4]	; (8000a2c <__sfp_lock_acquire+0x8>)
 8000a26:	f000 b8b3 	b.w	8000b90 <__retarget_lock_acquire_recursive>
 8000a2a:	bf00      	nop
 8000a2c:	20001371 	.word	0x20001371

08000a30 <__sfp_lock_release>:
 8000a30:	4801      	ldr	r0, [pc, #4]	; (8000a38 <__sfp_lock_release+0x8>)
 8000a32:	f000 b8ae 	b.w	8000b92 <__retarget_lock_release_recursive>
 8000a36:	bf00      	nop
 8000a38:	20001371 	.word	0x20001371

08000a3c <__sinit_lock_acquire>:
 8000a3c:	4801      	ldr	r0, [pc, #4]	; (8000a44 <__sinit_lock_acquire+0x8>)
 8000a3e:	f000 b8a7 	b.w	8000b90 <__retarget_lock_acquire_recursive>
 8000a42:	bf00      	nop
 8000a44:	20001372 	.word	0x20001372

08000a48 <__sinit_lock_release>:
 8000a48:	4801      	ldr	r0, [pc, #4]	; (8000a50 <__sinit_lock_release+0x8>)
 8000a4a:	f000 b8a2 	b.w	8000b92 <__retarget_lock_release_recursive>
 8000a4e:	bf00      	nop
 8000a50:	20001372 	.word	0x20001372

08000a54 <__sinit>:
 8000a54:	b510      	push	{r4, lr}
 8000a56:	4604      	mov	r4, r0
 8000a58:	f7ff fff0 	bl	8000a3c <__sinit_lock_acquire>
 8000a5c:	69a3      	ldr	r3, [r4, #24]
 8000a5e:	b11b      	cbz	r3, 8000a68 <__sinit+0x14>
 8000a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a64:	f7ff bff0 	b.w	8000a48 <__sinit_lock_release>
 8000a68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a6c:	6523      	str	r3, [r4, #80]	; 0x50
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <__sinit+0x68>)
 8000a70:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <__sinit+0x6c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a76:	42a3      	cmp	r3, r4
 8000a78:	bf04      	itt	eq
 8000a7a:	2301      	moveq	r3, #1
 8000a7c:	61a3      	streq	r3, [r4, #24]
 8000a7e:	4620      	mov	r0, r4
 8000a80:	f000 f820 	bl	8000ac4 <__sfp>
 8000a84:	6060      	str	r0, [r4, #4]
 8000a86:	4620      	mov	r0, r4
 8000a88:	f000 f81c 	bl	8000ac4 <__sfp>
 8000a8c:	60a0      	str	r0, [r4, #8]
 8000a8e:	4620      	mov	r0, r4
 8000a90:	f000 f818 	bl	8000ac4 <__sfp>
 8000a94:	2200      	movs	r2, #0
 8000a96:	60e0      	str	r0, [r4, #12]
 8000a98:	2104      	movs	r1, #4
 8000a9a:	6860      	ldr	r0, [r4, #4]
 8000a9c:	f7ff ff82 	bl	80009a4 <std>
 8000aa0:	68a0      	ldr	r0, [r4, #8]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2109      	movs	r1, #9
 8000aa6:	f7ff ff7d 	bl	80009a4 <std>
 8000aaa:	68e0      	ldr	r0, [r4, #12]
 8000aac:	2202      	movs	r2, #2
 8000aae:	2112      	movs	r1, #18
 8000ab0:	f7ff ff78 	bl	80009a4 <std>
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61a3      	str	r3, [r4, #24]
 8000ab8:	e7d2      	b.n	8000a60 <__sinit+0xc>
 8000aba:	bf00      	nop
 8000abc:	08001908 	.word	0x08001908
 8000ac0:	080009ed 	.word	0x080009ed

08000ac4 <__sfp>:
 8000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac6:	4607      	mov	r7, r0
 8000ac8:	f7ff ffac 	bl	8000a24 <__sfp_lock_acquire>
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <__sfp+0x84>)
 8000ace:	681e      	ldr	r6, [r3, #0]
 8000ad0:	69b3      	ldr	r3, [r6, #24]
 8000ad2:	b913      	cbnz	r3, 8000ada <__sfp+0x16>
 8000ad4:	4630      	mov	r0, r6
 8000ad6:	f7ff ffbd 	bl	8000a54 <__sinit>
 8000ada:	3648      	adds	r6, #72	; 0x48
 8000adc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	d503      	bpl.n	8000aec <__sfp+0x28>
 8000ae4:	6833      	ldr	r3, [r6, #0]
 8000ae6:	b30b      	cbz	r3, 8000b2c <__sfp+0x68>
 8000ae8:	6836      	ldr	r6, [r6, #0]
 8000aea:	e7f7      	b.n	8000adc <__sfp+0x18>
 8000aec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000af0:	b9d5      	cbnz	r5, 8000b28 <__sfp+0x64>
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <__sfp+0x88>)
 8000af4:	60e3      	str	r3, [r4, #12]
 8000af6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000afa:	6665      	str	r5, [r4, #100]	; 0x64
 8000afc:	f000 f847 	bl	8000b8e <__retarget_lock_init_recursive>
 8000b00:	f7ff ff96 	bl	8000a30 <__sfp_lock_release>
 8000b04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000b08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000b0c:	6025      	str	r5, [r4, #0]
 8000b0e:	61a5      	str	r5, [r4, #24]
 8000b10:	2208      	movs	r2, #8
 8000b12:	4629      	mov	r1, r5
 8000b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b18:	f7ff ff24 	bl	8000964 <memset>
 8000b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b24:	4620      	mov	r0, r4
 8000b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b28:	3468      	adds	r4, #104	; 0x68
 8000b2a:	e7d9      	b.n	8000ae0 <__sfp+0x1c>
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	4638      	mov	r0, r7
 8000b30:	f7ff ff62 	bl	80009f8 <__sfmoreglue>
 8000b34:	4604      	mov	r4, r0
 8000b36:	6030      	str	r0, [r6, #0]
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d1d5      	bne.n	8000ae8 <__sfp+0x24>
 8000b3c:	f7ff ff78 	bl	8000a30 <__sfp_lock_release>
 8000b40:	230c      	movs	r3, #12
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	e7ee      	b.n	8000b24 <__sfp+0x60>
 8000b46:	bf00      	nop
 8000b48:	08001908 	.word	0x08001908
 8000b4c:	ffff0001 	.word	0xffff0001

08000b50 <_fwalk_reent>:
 8000b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b54:	4606      	mov	r6, r0
 8000b56:	4688      	mov	r8, r1
 8000b58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b5c:	2700      	movs	r7, #0
 8000b5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b62:	f1b9 0901 	subs.w	r9, r9, #1
 8000b66:	d505      	bpl.n	8000b74 <_fwalk_reent+0x24>
 8000b68:	6824      	ldr	r4, [r4, #0]
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d1f7      	bne.n	8000b5e <_fwalk_reent+0xe>
 8000b6e:	4638      	mov	r0, r7
 8000b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b74:	89ab      	ldrh	r3, [r5, #12]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d907      	bls.n	8000b8a <_fwalk_reent+0x3a>
 8000b7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	d003      	beq.n	8000b8a <_fwalk_reent+0x3a>
 8000b82:	4629      	mov	r1, r5
 8000b84:	4630      	mov	r0, r6
 8000b86:	47c0      	blx	r8
 8000b88:	4307      	orrs	r7, r0
 8000b8a:	3568      	adds	r5, #104	; 0x68
 8000b8c:	e7e9      	b.n	8000b62 <_fwalk_reent+0x12>

08000b8e <__retarget_lock_init_recursive>:
 8000b8e:	4770      	bx	lr

08000b90 <__retarget_lock_acquire_recursive>:
 8000b90:	4770      	bx	lr

08000b92 <__retarget_lock_release_recursive>:
 8000b92:	4770      	bx	lr

08000b94 <sbrk_aligned>:
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	4e0e      	ldr	r6, [pc, #56]	; (8000bd0 <sbrk_aligned+0x3c>)
 8000b98:	460c      	mov	r4, r1
 8000b9a:	6831      	ldr	r1, [r6, #0]
 8000b9c:	4605      	mov	r5, r0
 8000b9e:	b911      	cbnz	r1, 8000ba6 <sbrk_aligned+0x12>
 8000ba0:	f000 fb7a 	bl	8001298 <_sbrk_r>
 8000ba4:	6030      	str	r0, [r6, #0]
 8000ba6:	4621      	mov	r1, r4
 8000ba8:	4628      	mov	r0, r5
 8000baa:	f000 fb75 	bl	8001298 <_sbrk_r>
 8000bae:	1c43      	adds	r3, r0, #1
 8000bb0:	d00a      	beq.n	8000bc8 <sbrk_aligned+0x34>
 8000bb2:	1cc4      	adds	r4, r0, #3
 8000bb4:	f024 0403 	bic.w	r4, r4, #3
 8000bb8:	42a0      	cmp	r0, r4
 8000bba:	d007      	beq.n	8000bcc <sbrk_aligned+0x38>
 8000bbc:	1a21      	subs	r1, r4, r0
 8000bbe:	4628      	mov	r0, r5
 8000bc0:	f000 fb6a 	bl	8001298 <_sbrk_r>
 8000bc4:	3001      	adds	r0, #1
 8000bc6:	d101      	bne.n	8000bcc <sbrk_aligned+0x38>
 8000bc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000bcc:	4620      	mov	r0, r4
 8000bce:	bd70      	pop	{r4, r5, r6, pc}
 8000bd0:	20001378 	.word	0x20001378

08000bd4 <_malloc_r>:
 8000bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bd8:	1ccd      	adds	r5, r1, #3
 8000bda:	f025 0503 	bic.w	r5, r5, #3
 8000bde:	3508      	adds	r5, #8
 8000be0:	2d0c      	cmp	r5, #12
 8000be2:	bf38      	it	cc
 8000be4:	250c      	movcc	r5, #12
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	4607      	mov	r7, r0
 8000bea:	db01      	blt.n	8000bf0 <_malloc_r+0x1c>
 8000bec:	42a9      	cmp	r1, r5
 8000bee:	d905      	bls.n	8000bfc <_malloc_r+0x28>
 8000bf0:	230c      	movs	r3, #12
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bfc:	4e2e      	ldr	r6, [pc, #184]	; (8000cb8 <_malloc_r+0xe4>)
 8000bfe:	f000 fdbb 	bl	8001778 <__malloc_lock>
 8000c02:	6833      	ldr	r3, [r6, #0]
 8000c04:	461c      	mov	r4, r3
 8000c06:	bb34      	cbnz	r4, 8000c56 <_malloc_r+0x82>
 8000c08:	4629      	mov	r1, r5
 8000c0a:	4638      	mov	r0, r7
 8000c0c:	f7ff ffc2 	bl	8000b94 <sbrk_aligned>
 8000c10:	1c43      	adds	r3, r0, #1
 8000c12:	4604      	mov	r4, r0
 8000c14:	d14d      	bne.n	8000cb2 <_malloc_r+0xde>
 8000c16:	6834      	ldr	r4, [r6, #0]
 8000c18:	4626      	mov	r6, r4
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d140      	bne.n	8000ca0 <_malloc_r+0xcc>
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	4631      	mov	r1, r6
 8000c22:	4638      	mov	r0, r7
 8000c24:	eb04 0803 	add.w	r8, r4, r3
 8000c28:	f000 fb36 	bl	8001298 <_sbrk_r>
 8000c2c:	4580      	cmp	r8, r0
 8000c2e:	d13a      	bne.n	8000ca6 <_malloc_r+0xd2>
 8000c30:	6821      	ldr	r1, [r4, #0]
 8000c32:	3503      	adds	r5, #3
 8000c34:	1a6d      	subs	r5, r5, r1
 8000c36:	f025 0503 	bic.w	r5, r5, #3
 8000c3a:	3508      	adds	r5, #8
 8000c3c:	2d0c      	cmp	r5, #12
 8000c3e:	bf38      	it	cc
 8000c40:	250c      	movcc	r5, #12
 8000c42:	4629      	mov	r1, r5
 8000c44:	4638      	mov	r0, r7
 8000c46:	f7ff ffa5 	bl	8000b94 <sbrk_aligned>
 8000c4a:	3001      	adds	r0, #1
 8000c4c:	d02b      	beq.n	8000ca6 <_malloc_r+0xd2>
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	442b      	add	r3, r5
 8000c52:	6023      	str	r3, [r4, #0]
 8000c54:	e00e      	b.n	8000c74 <_malloc_r+0xa0>
 8000c56:	6822      	ldr	r2, [r4, #0]
 8000c58:	1b52      	subs	r2, r2, r5
 8000c5a:	d41e      	bmi.n	8000c9a <_malloc_r+0xc6>
 8000c5c:	2a0b      	cmp	r2, #11
 8000c5e:	d916      	bls.n	8000c8e <_malloc_r+0xba>
 8000c60:	1961      	adds	r1, r4, r5
 8000c62:	42a3      	cmp	r3, r4
 8000c64:	6025      	str	r5, [r4, #0]
 8000c66:	bf18      	it	ne
 8000c68:	6059      	strne	r1, [r3, #4]
 8000c6a:	6863      	ldr	r3, [r4, #4]
 8000c6c:	bf08      	it	eq
 8000c6e:	6031      	streq	r1, [r6, #0]
 8000c70:	5162      	str	r2, [r4, r5]
 8000c72:	604b      	str	r3, [r1, #4]
 8000c74:	4638      	mov	r0, r7
 8000c76:	f104 060b 	add.w	r6, r4, #11
 8000c7a:	f000 fd83 	bl	8001784 <__malloc_unlock>
 8000c7e:	f026 0607 	bic.w	r6, r6, #7
 8000c82:	1d23      	adds	r3, r4, #4
 8000c84:	1af2      	subs	r2, r6, r3
 8000c86:	d0b6      	beq.n	8000bf6 <_malloc_r+0x22>
 8000c88:	1b9b      	subs	r3, r3, r6
 8000c8a:	50a3      	str	r3, [r4, r2]
 8000c8c:	e7b3      	b.n	8000bf6 <_malloc_r+0x22>
 8000c8e:	6862      	ldr	r2, [r4, #4]
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	bf0c      	ite	eq
 8000c94:	6032      	streq	r2, [r6, #0]
 8000c96:	605a      	strne	r2, [r3, #4]
 8000c98:	e7ec      	b.n	8000c74 <_malloc_r+0xa0>
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	6864      	ldr	r4, [r4, #4]
 8000c9e:	e7b2      	b.n	8000c06 <_malloc_r+0x32>
 8000ca0:	4634      	mov	r4, r6
 8000ca2:	6876      	ldr	r6, [r6, #4]
 8000ca4:	e7b9      	b.n	8000c1a <_malloc_r+0x46>
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4638      	mov	r0, r7
 8000cac:	f000 fd6a 	bl	8001784 <__malloc_unlock>
 8000cb0:	e7a1      	b.n	8000bf6 <_malloc_r+0x22>
 8000cb2:	6025      	str	r5, [r4, #0]
 8000cb4:	e7de      	b.n	8000c74 <_malloc_r+0xa0>
 8000cb6:	bf00      	nop
 8000cb8:	20001374 	.word	0x20001374

08000cbc <__sfputc_r>:
 8000cbc:	6893      	ldr	r3, [r2, #8]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	b410      	push	{r4}
 8000cc4:	6093      	str	r3, [r2, #8]
 8000cc6:	da08      	bge.n	8000cda <__sfputc_r+0x1e>
 8000cc8:	6994      	ldr	r4, [r2, #24]
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	db01      	blt.n	8000cd2 <__sfputc_r+0x16>
 8000cce:	290a      	cmp	r1, #10
 8000cd0:	d103      	bne.n	8000cda <__sfputc_r+0x1e>
 8000cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cd6:	f000 bb33 	b.w	8001340 <__swbuf_r>
 8000cda:	6813      	ldr	r3, [r2, #0]
 8000cdc:	1c58      	adds	r0, r3, #1
 8000cde:	6010      	str	r0, [r2, #0]
 8000ce0:	7019      	strb	r1, [r3, #0]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <__sfputs_r>:
 8000cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cec:	4606      	mov	r6, r0
 8000cee:	460f      	mov	r7, r1
 8000cf0:	4614      	mov	r4, r2
 8000cf2:	18d5      	adds	r5, r2, r3
 8000cf4:	42ac      	cmp	r4, r5
 8000cf6:	d101      	bne.n	8000cfc <__sfputs_r+0x12>
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	e007      	b.n	8000d0c <__sfputs_r+0x22>
 8000cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d00:	463a      	mov	r2, r7
 8000d02:	4630      	mov	r0, r6
 8000d04:	f7ff ffda 	bl	8000cbc <__sfputc_r>
 8000d08:	1c43      	adds	r3, r0, #1
 8000d0a:	d1f3      	bne.n	8000cf4 <__sfputs_r+0xa>
 8000d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d10 <_vfiprintf_r>:
 8000d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d14:	460d      	mov	r5, r1
 8000d16:	b09d      	sub	sp, #116	; 0x74
 8000d18:	4614      	mov	r4, r2
 8000d1a:	4698      	mov	r8, r3
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	b118      	cbz	r0, 8000d28 <_vfiprintf_r+0x18>
 8000d20:	6983      	ldr	r3, [r0, #24]
 8000d22:	b90b      	cbnz	r3, 8000d28 <_vfiprintf_r+0x18>
 8000d24:	f7ff fe96 	bl	8000a54 <__sinit>
 8000d28:	4b89      	ldr	r3, [pc, #548]	; (8000f50 <_vfiprintf_r+0x240>)
 8000d2a:	429d      	cmp	r5, r3
 8000d2c:	d11b      	bne.n	8000d66 <_vfiprintf_r+0x56>
 8000d2e:	6875      	ldr	r5, [r6, #4]
 8000d30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d32:	07d9      	lsls	r1, r3, #31
 8000d34:	d405      	bmi.n	8000d42 <_vfiprintf_r+0x32>
 8000d36:	89ab      	ldrh	r3, [r5, #12]
 8000d38:	059a      	lsls	r2, r3, #22
 8000d3a:	d402      	bmi.n	8000d42 <_vfiprintf_r+0x32>
 8000d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d3e:	f7ff ff27 	bl	8000b90 <__retarget_lock_acquire_recursive>
 8000d42:	89ab      	ldrh	r3, [r5, #12]
 8000d44:	071b      	lsls	r3, r3, #28
 8000d46:	d501      	bpl.n	8000d4c <_vfiprintf_r+0x3c>
 8000d48:	692b      	ldr	r3, [r5, #16]
 8000d4a:	b9eb      	cbnz	r3, 8000d88 <_vfiprintf_r+0x78>
 8000d4c:	4629      	mov	r1, r5
 8000d4e:	4630      	mov	r0, r6
 8000d50:	f000 fb5a 	bl	8001408 <__swsetup_r>
 8000d54:	b1c0      	cbz	r0, 8000d88 <_vfiprintf_r+0x78>
 8000d56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d58:	07dc      	lsls	r4, r3, #31
 8000d5a:	d50e      	bpl.n	8000d7a <_vfiprintf_r+0x6a>
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d60:	b01d      	add	sp, #116	; 0x74
 8000d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d66:	4b7b      	ldr	r3, [pc, #492]	; (8000f54 <_vfiprintf_r+0x244>)
 8000d68:	429d      	cmp	r5, r3
 8000d6a:	d101      	bne.n	8000d70 <_vfiprintf_r+0x60>
 8000d6c:	68b5      	ldr	r5, [r6, #8]
 8000d6e:	e7df      	b.n	8000d30 <_vfiprintf_r+0x20>
 8000d70:	4b79      	ldr	r3, [pc, #484]	; (8000f58 <_vfiprintf_r+0x248>)
 8000d72:	429d      	cmp	r5, r3
 8000d74:	bf08      	it	eq
 8000d76:	68f5      	ldreq	r5, [r6, #12]
 8000d78:	e7da      	b.n	8000d30 <_vfiprintf_r+0x20>
 8000d7a:	89ab      	ldrh	r3, [r5, #12]
 8000d7c:	0598      	lsls	r0, r3, #22
 8000d7e:	d4ed      	bmi.n	8000d5c <_vfiprintf_r+0x4c>
 8000d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d82:	f7ff ff06 	bl	8000b92 <__retarget_lock_release_recursive>
 8000d86:	e7e9      	b.n	8000d5c <_vfiprintf_r+0x4c>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d8c:	2320      	movs	r3, #32
 8000d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d92:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d96:	2330      	movs	r3, #48	; 0x30
 8000d98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000f5c <_vfiprintf_r+0x24c>
 8000d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000da0:	f04f 0901 	mov.w	r9, #1
 8000da4:	4623      	mov	r3, r4
 8000da6:	469a      	mov	sl, r3
 8000da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dac:	b10a      	cbz	r2, 8000db2 <_vfiprintf_r+0xa2>
 8000dae:	2a25      	cmp	r2, #37	; 0x25
 8000db0:	d1f9      	bne.n	8000da6 <_vfiprintf_r+0x96>
 8000db2:	ebba 0b04 	subs.w	fp, sl, r4
 8000db6:	d00b      	beq.n	8000dd0 <_vfiprintf_r+0xc0>
 8000db8:	465b      	mov	r3, fp
 8000dba:	4622      	mov	r2, r4
 8000dbc:	4629      	mov	r1, r5
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	f7ff ff93 	bl	8000cea <__sfputs_r>
 8000dc4:	3001      	adds	r0, #1
 8000dc6:	f000 80aa 	beq.w	8000f1e <_vfiprintf_r+0x20e>
 8000dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000dcc:	445a      	add	r2, fp
 8000dce:	9209      	str	r2, [sp, #36]	; 0x24
 8000dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 80a2 	beq.w	8000f1e <_vfiprintf_r+0x20e>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000de4:	f10a 0a01 	add.w	sl, sl, #1
 8000de8:	9304      	str	r3, [sp, #16]
 8000dea:	9307      	str	r3, [sp, #28]
 8000dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000df0:	931a      	str	r3, [sp, #104]	; 0x68
 8000df2:	4654      	mov	r4, sl
 8000df4:	2205      	movs	r2, #5
 8000df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dfa:	4858      	ldr	r0, [pc, #352]	; (8000f5c <_vfiprintf_r+0x24c>)
 8000dfc:	f7ff f9f0 	bl	80001e0 <memchr>
 8000e00:	9a04      	ldr	r2, [sp, #16]
 8000e02:	b9d8      	cbnz	r0, 8000e3c <_vfiprintf_r+0x12c>
 8000e04:	06d1      	lsls	r1, r2, #27
 8000e06:	bf44      	itt	mi
 8000e08:	2320      	movmi	r3, #32
 8000e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e0e:	0713      	lsls	r3, r2, #28
 8000e10:	bf44      	itt	mi
 8000e12:	232b      	movmi	r3, #43	; 0x2b
 8000e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e18:	f89a 3000 	ldrb.w	r3, [sl]
 8000e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8000e1e:	d015      	beq.n	8000e4c <_vfiprintf_r+0x13c>
 8000e20:	9a07      	ldr	r2, [sp, #28]
 8000e22:	4654      	mov	r4, sl
 8000e24:	2000      	movs	r0, #0
 8000e26:	f04f 0c0a 	mov.w	ip, #10
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e30:	3b30      	subs	r3, #48	; 0x30
 8000e32:	2b09      	cmp	r3, #9
 8000e34:	d94e      	bls.n	8000ed4 <_vfiprintf_r+0x1c4>
 8000e36:	b1b0      	cbz	r0, 8000e66 <_vfiprintf_r+0x156>
 8000e38:	9207      	str	r2, [sp, #28]
 8000e3a:	e014      	b.n	8000e66 <_vfiprintf_r+0x156>
 8000e3c:	eba0 0308 	sub.w	r3, r0, r8
 8000e40:	fa09 f303 	lsl.w	r3, r9, r3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	9304      	str	r3, [sp, #16]
 8000e48:	46a2      	mov	sl, r4
 8000e4a:	e7d2      	b.n	8000df2 <_vfiprintf_r+0xe2>
 8000e4c:	9b03      	ldr	r3, [sp, #12]
 8000e4e:	1d19      	adds	r1, r3, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	9103      	str	r1, [sp, #12]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	bfbb      	ittet	lt
 8000e58:	425b      	neglt	r3, r3
 8000e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e5e:	9307      	strge	r3, [sp, #28]
 8000e60:	9307      	strlt	r3, [sp, #28]
 8000e62:	bfb8      	it	lt
 8000e64:	9204      	strlt	r2, [sp, #16]
 8000e66:	7823      	ldrb	r3, [r4, #0]
 8000e68:	2b2e      	cmp	r3, #46	; 0x2e
 8000e6a:	d10c      	bne.n	8000e86 <_vfiprintf_r+0x176>
 8000e6c:	7863      	ldrb	r3, [r4, #1]
 8000e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8000e70:	d135      	bne.n	8000ede <_vfiprintf_r+0x1ce>
 8000e72:	9b03      	ldr	r3, [sp, #12]
 8000e74:	1d1a      	adds	r2, r3, #4
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	9203      	str	r2, [sp, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bfb8      	it	lt
 8000e7e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000e82:	3402      	adds	r4, #2
 8000e84:	9305      	str	r3, [sp, #20]
 8000e86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000f6c <_vfiprintf_r+0x25c>
 8000e8a:	7821      	ldrb	r1, [r4, #0]
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	4650      	mov	r0, sl
 8000e90:	f7ff f9a6 	bl	80001e0 <memchr>
 8000e94:	b140      	cbz	r0, 8000ea8 <_vfiprintf_r+0x198>
 8000e96:	2340      	movs	r3, #64	; 0x40
 8000e98:	eba0 000a 	sub.w	r0, r0, sl
 8000e9c:	fa03 f000 	lsl.w	r0, r3, r0
 8000ea0:	9b04      	ldr	r3, [sp, #16]
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	3401      	adds	r4, #1
 8000ea6:	9304      	str	r3, [sp, #16]
 8000ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eac:	482c      	ldr	r0, [pc, #176]	; (8000f60 <_vfiprintf_r+0x250>)
 8000eae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000eb2:	2206      	movs	r2, #6
 8000eb4:	f7ff f994 	bl	80001e0 <memchr>
 8000eb8:	2800      	cmp	r0, #0
 8000eba:	d03f      	beq.n	8000f3c <_vfiprintf_r+0x22c>
 8000ebc:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <_vfiprintf_r+0x254>)
 8000ebe:	bb1b      	cbnz	r3, 8000f08 <_vfiprintf_r+0x1f8>
 8000ec0:	9b03      	ldr	r3, [sp, #12]
 8000ec2:	3307      	adds	r3, #7
 8000ec4:	f023 0307 	bic.w	r3, r3, #7
 8000ec8:	3308      	adds	r3, #8
 8000eca:	9303      	str	r3, [sp, #12]
 8000ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ece:	443b      	add	r3, r7
 8000ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8000ed2:	e767      	b.n	8000da4 <_vfiprintf_r+0x94>
 8000ed4:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ed8:	460c      	mov	r4, r1
 8000eda:	2001      	movs	r0, #1
 8000edc:	e7a5      	b.n	8000e2a <_vfiprintf_r+0x11a>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	3401      	adds	r4, #1
 8000ee2:	9305      	str	r3, [sp, #20]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f04f 0c0a 	mov.w	ip, #10
 8000eea:	4620      	mov	r0, r4
 8000eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ef0:	3a30      	subs	r2, #48	; 0x30
 8000ef2:	2a09      	cmp	r2, #9
 8000ef4:	d903      	bls.n	8000efe <_vfiprintf_r+0x1ee>
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0c5      	beq.n	8000e86 <_vfiprintf_r+0x176>
 8000efa:	9105      	str	r1, [sp, #20]
 8000efc:	e7c3      	b.n	8000e86 <_vfiprintf_r+0x176>
 8000efe:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f02:	4604      	mov	r4, r0
 8000f04:	2301      	movs	r3, #1
 8000f06:	e7f0      	b.n	8000eea <_vfiprintf_r+0x1da>
 8000f08:	ab03      	add	r3, sp, #12
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	462a      	mov	r2, r5
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <_vfiprintf_r+0x258>)
 8000f10:	a904      	add	r1, sp, #16
 8000f12:	4630      	mov	r0, r6
 8000f14:	f3af 8000 	nop.w
 8000f18:	4607      	mov	r7, r0
 8000f1a:	1c78      	adds	r0, r7, #1
 8000f1c:	d1d6      	bne.n	8000ecc <_vfiprintf_r+0x1bc>
 8000f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f20:	07d9      	lsls	r1, r3, #31
 8000f22:	d405      	bmi.n	8000f30 <_vfiprintf_r+0x220>
 8000f24:	89ab      	ldrh	r3, [r5, #12]
 8000f26:	059a      	lsls	r2, r3, #22
 8000f28:	d402      	bmi.n	8000f30 <_vfiprintf_r+0x220>
 8000f2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f2c:	f7ff fe31 	bl	8000b92 <__retarget_lock_release_recursive>
 8000f30:	89ab      	ldrh	r3, [r5, #12]
 8000f32:	065b      	lsls	r3, r3, #25
 8000f34:	f53f af12 	bmi.w	8000d5c <_vfiprintf_r+0x4c>
 8000f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f3a:	e711      	b.n	8000d60 <_vfiprintf_r+0x50>
 8000f3c:	ab03      	add	r3, sp, #12
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	462a      	mov	r2, r5
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <_vfiprintf_r+0x258>)
 8000f44:	a904      	add	r1, sp, #16
 8000f46:	4630      	mov	r0, r6
 8000f48:	f000 f880 	bl	800104c <_printf_i>
 8000f4c:	e7e4      	b.n	8000f18 <_vfiprintf_r+0x208>
 8000f4e:	bf00      	nop
 8000f50:	0800192c 	.word	0x0800192c
 8000f54:	0800194c 	.word	0x0800194c
 8000f58:	0800190c 	.word	0x0800190c
 8000f5c:	0800196c 	.word	0x0800196c
 8000f60:	08001976 	.word	0x08001976
 8000f64:	00000000 	.word	0x00000000
 8000f68:	08000ceb 	.word	0x08000ceb
 8000f6c:	08001972 	.word	0x08001972

08000f70 <_printf_common>:
 8000f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f74:	4616      	mov	r6, r2
 8000f76:	4699      	mov	r9, r3
 8000f78:	688a      	ldr	r2, [r1, #8]
 8000f7a:	690b      	ldr	r3, [r1, #16]
 8000f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f80:	4293      	cmp	r3, r2
 8000f82:	bfb8      	it	lt
 8000f84:	4613      	movlt	r3, r2
 8000f86:	6033      	str	r3, [r6, #0]
 8000f88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f8c:	4607      	mov	r7, r0
 8000f8e:	460c      	mov	r4, r1
 8000f90:	b10a      	cbz	r2, 8000f96 <_printf_common+0x26>
 8000f92:	3301      	adds	r3, #1
 8000f94:	6033      	str	r3, [r6, #0]
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	0699      	lsls	r1, r3, #26
 8000f9a:	bf42      	ittt	mi
 8000f9c:	6833      	ldrmi	r3, [r6, #0]
 8000f9e:	3302      	addmi	r3, #2
 8000fa0:	6033      	strmi	r3, [r6, #0]
 8000fa2:	6825      	ldr	r5, [r4, #0]
 8000fa4:	f015 0506 	ands.w	r5, r5, #6
 8000fa8:	d106      	bne.n	8000fb8 <_printf_common+0x48>
 8000faa:	f104 0a19 	add.w	sl, r4, #25
 8000fae:	68e3      	ldr	r3, [r4, #12]
 8000fb0:	6832      	ldr	r2, [r6, #0]
 8000fb2:	1a9b      	subs	r3, r3, r2
 8000fb4:	42ab      	cmp	r3, r5
 8000fb6:	dc26      	bgt.n	8001006 <_printf_common+0x96>
 8000fb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fbc:	1e13      	subs	r3, r2, #0
 8000fbe:	6822      	ldr	r2, [r4, #0]
 8000fc0:	bf18      	it	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	0692      	lsls	r2, r2, #26
 8000fc6:	d42b      	bmi.n	8001020 <_printf_common+0xb0>
 8000fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fcc:	4649      	mov	r1, r9
 8000fce:	4638      	mov	r0, r7
 8000fd0:	47c0      	blx	r8
 8000fd2:	3001      	adds	r0, #1
 8000fd4:	d01e      	beq.n	8001014 <_printf_common+0xa4>
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	68e5      	ldr	r5, [r4, #12]
 8000fda:	6832      	ldr	r2, [r6, #0]
 8000fdc:	f003 0306 	and.w	r3, r3, #6
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	bf08      	it	eq
 8000fe4:	1aad      	subeq	r5, r5, r2
 8000fe6:	68a3      	ldr	r3, [r4, #8]
 8000fe8:	6922      	ldr	r2, [r4, #16]
 8000fea:	bf0c      	ite	eq
 8000fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ff0:	2500      	movne	r5, #0
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	bfc4      	itt	gt
 8000ff6:	1a9b      	subgt	r3, r3, r2
 8000ff8:	18ed      	addgt	r5, r5, r3
 8000ffa:	2600      	movs	r6, #0
 8000ffc:	341a      	adds	r4, #26
 8000ffe:	42b5      	cmp	r5, r6
 8001000:	d11a      	bne.n	8001038 <_printf_common+0xc8>
 8001002:	2000      	movs	r0, #0
 8001004:	e008      	b.n	8001018 <_printf_common+0xa8>
 8001006:	2301      	movs	r3, #1
 8001008:	4652      	mov	r2, sl
 800100a:	4649      	mov	r1, r9
 800100c:	4638      	mov	r0, r7
 800100e:	47c0      	blx	r8
 8001010:	3001      	adds	r0, #1
 8001012:	d103      	bne.n	800101c <_printf_common+0xac>
 8001014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101c:	3501      	adds	r5, #1
 800101e:	e7c6      	b.n	8000fae <_printf_common+0x3e>
 8001020:	18e1      	adds	r1, r4, r3
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	2030      	movs	r0, #48	; 0x30
 8001026:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800102a:	4422      	add	r2, r4
 800102c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001034:	3302      	adds	r3, #2
 8001036:	e7c7      	b.n	8000fc8 <_printf_common+0x58>
 8001038:	2301      	movs	r3, #1
 800103a:	4622      	mov	r2, r4
 800103c:	4649      	mov	r1, r9
 800103e:	4638      	mov	r0, r7
 8001040:	47c0      	blx	r8
 8001042:	3001      	adds	r0, #1
 8001044:	d0e6      	beq.n	8001014 <_printf_common+0xa4>
 8001046:	3601      	adds	r6, #1
 8001048:	e7d9      	b.n	8000ffe <_printf_common+0x8e>
	...

0800104c <_printf_i>:
 800104c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001050:	7e0f      	ldrb	r7, [r1, #24]
 8001052:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001054:	2f78      	cmp	r7, #120	; 0x78
 8001056:	4691      	mov	r9, r2
 8001058:	4680      	mov	r8, r0
 800105a:	460c      	mov	r4, r1
 800105c:	469a      	mov	sl, r3
 800105e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001062:	d807      	bhi.n	8001074 <_printf_i+0x28>
 8001064:	2f62      	cmp	r7, #98	; 0x62
 8001066:	d80a      	bhi.n	800107e <_printf_i+0x32>
 8001068:	2f00      	cmp	r7, #0
 800106a:	f000 80d8 	beq.w	800121e <_printf_i+0x1d2>
 800106e:	2f58      	cmp	r7, #88	; 0x58
 8001070:	f000 80a3 	beq.w	80011ba <_printf_i+0x16e>
 8001074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800107c:	e03a      	b.n	80010f4 <_printf_i+0xa8>
 800107e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001082:	2b15      	cmp	r3, #21
 8001084:	d8f6      	bhi.n	8001074 <_printf_i+0x28>
 8001086:	a101      	add	r1, pc, #4	; (adr r1, 800108c <_printf_i+0x40>)
 8001088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800108c:	080010e5 	.word	0x080010e5
 8001090:	080010f9 	.word	0x080010f9
 8001094:	08001075 	.word	0x08001075
 8001098:	08001075 	.word	0x08001075
 800109c:	08001075 	.word	0x08001075
 80010a0:	08001075 	.word	0x08001075
 80010a4:	080010f9 	.word	0x080010f9
 80010a8:	08001075 	.word	0x08001075
 80010ac:	08001075 	.word	0x08001075
 80010b0:	08001075 	.word	0x08001075
 80010b4:	08001075 	.word	0x08001075
 80010b8:	08001205 	.word	0x08001205
 80010bc:	08001129 	.word	0x08001129
 80010c0:	080011e7 	.word	0x080011e7
 80010c4:	08001075 	.word	0x08001075
 80010c8:	08001075 	.word	0x08001075
 80010cc:	08001227 	.word	0x08001227
 80010d0:	08001075 	.word	0x08001075
 80010d4:	08001129 	.word	0x08001129
 80010d8:	08001075 	.word	0x08001075
 80010dc:	08001075 	.word	0x08001075
 80010e0:	080011ef 	.word	0x080011ef
 80010e4:	682b      	ldr	r3, [r5, #0]
 80010e6:	1d1a      	adds	r2, r3, #4
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	602a      	str	r2, [r5, #0]
 80010ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010f4:	2301      	movs	r3, #1
 80010f6:	e0a3      	b.n	8001240 <_printf_i+0x1f4>
 80010f8:	6820      	ldr	r0, [r4, #0]
 80010fa:	6829      	ldr	r1, [r5, #0]
 80010fc:	0606      	lsls	r6, r0, #24
 80010fe:	f101 0304 	add.w	r3, r1, #4
 8001102:	d50a      	bpl.n	800111a <_printf_i+0xce>
 8001104:	680e      	ldr	r6, [r1, #0]
 8001106:	602b      	str	r3, [r5, #0]
 8001108:	2e00      	cmp	r6, #0
 800110a:	da03      	bge.n	8001114 <_printf_i+0xc8>
 800110c:	232d      	movs	r3, #45	; 0x2d
 800110e:	4276      	negs	r6, r6
 8001110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001114:	485e      	ldr	r0, [pc, #376]	; (8001290 <_printf_i+0x244>)
 8001116:	230a      	movs	r3, #10
 8001118:	e019      	b.n	800114e <_printf_i+0x102>
 800111a:	680e      	ldr	r6, [r1, #0]
 800111c:	602b      	str	r3, [r5, #0]
 800111e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001122:	bf18      	it	ne
 8001124:	b236      	sxthne	r6, r6
 8001126:	e7ef      	b.n	8001108 <_printf_i+0xbc>
 8001128:	682b      	ldr	r3, [r5, #0]
 800112a:	6820      	ldr	r0, [r4, #0]
 800112c:	1d19      	adds	r1, r3, #4
 800112e:	6029      	str	r1, [r5, #0]
 8001130:	0601      	lsls	r1, r0, #24
 8001132:	d501      	bpl.n	8001138 <_printf_i+0xec>
 8001134:	681e      	ldr	r6, [r3, #0]
 8001136:	e002      	b.n	800113e <_printf_i+0xf2>
 8001138:	0646      	lsls	r6, r0, #25
 800113a:	d5fb      	bpl.n	8001134 <_printf_i+0xe8>
 800113c:	881e      	ldrh	r6, [r3, #0]
 800113e:	4854      	ldr	r0, [pc, #336]	; (8001290 <_printf_i+0x244>)
 8001140:	2f6f      	cmp	r7, #111	; 0x6f
 8001142:	bf0c      	ite	eq
 8001144:	2308      	moveq	r3, #8
 8001146:	230a      	movne	r3, #10
 8001148:	2100      	movs	r1, #0
 800114a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800114e:	6865      	ldr	r5, [r4, #4]
 8001150:	60a5      	str	r5, [r4, #8]
 8001152:	2d00      	cmp	r5, #0
 8001154:	bfa2      	ittt	ge
 8001156:	6821      	ldrge	r1, [r4, #0]
 8001158:	f021 0104 	bicge.w	r1, r1, #4
 800115c:	6021      	strge	r1, [r4, #0]
 800115e:	b90e      	cbnz	r6, 8001164 <_printf_i+0x118>
 8001160:	2d00      	cmp	r5, #0
 8001162:	d04d      	beq.n	8001200 <_printf_i+0x1b4>
 8001164:	4615      	mov	r5, r2
 8001166:	fbb6 f1f3 	udiv	r1, r6, r3
 800116a:	fb03 6711 	mls	r7, r3, r1, r6
 800116e:	5dc7      	ldrb	r7, [r0, r7]
 8001170:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001174:	4637      	mov	r7, r6
 8001176:	42bb      	cmp	r3, r7
 8001178:	460e      	mov	r6, r1
 800117a:	d9f4      	bls.n	8001166 <_printf_i+0x11a>
 800117c:	2b08      	cmp	r3, #8
 800117e:	d10b      	bne.n	8001198 <_printf_i+0x14c>
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	07de      	lsls	r6, r3, #31
 8001184:	d508      	bpl.n	8001198 <_printf_i+0x14c>
 8001186:	6923      	ldr	r3, [r4, #16]
 8001188:	6861      	ldr	r1, [r4, #4]
 800118a:	4299      	cmp	r1, r3
 800118c:	bfde      	ittt	le
 800118e:	2330      	movle	r3, #48	; 0x30
 8001190:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001194:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001198:	1b52      	subs	r2, r2, r5
 800119a:	6122      	str	r2, [r4, #16]
 800119c:	f8cd a000 	str.w	sl, [sp]
 80011a0:	464b      	mov	r3, r9
 80011a2:	aa03      	add	r2, sp, #12
 80011a4:	4621      	mov	r1, r4
 80011a6:	4640      	mov	r0, r8
 80011a8:	f7ff fee2 	bl	8000f70 <_printf_common>
 80011ac:	3001      	adds	r0, #1
 80011ae:	d14c      	bne.n	800124a <_printf_i+0x1fe>
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011b4:	b004      	add	sp, #16
 80011b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ba:	4835      	ldr	r0, [pc, #212]	; (8001290 <_printf_i+0x244>)
 80011bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80011c0:	6829      	ldr	r1, [r5, #0]
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80011c8:	6029      	str	r1, [r5, #0]
 80011ca:	061d      	lsls	r5, r3, #24
 80011cc:	d514      	bpl.n	80011f8 <_printf_i+0x1ac>
 80011ce:	07df      	lsls	r7, r3, #31
 80011d0:	bf44      	itt	mi
 80011d2:	f043 0320 	orrmi.w	r3, r3, #32
 80011d6:	6023      	strmi	r3, [r4, #0]
 80011d8:	b91e      	cbnz	r6, 80011e2 <_printf_i+0x196>
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	f023 0320 	bic.w	r3, r3, #32
 80011e0:	6023      	str	r3, [r4, #0]
 80011e2:	2310      	movs	r3, #16
 80011e4:	e7b0      	b.n	8001148 <_printf_i+0xfc>
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	f043 0320 	orr.w	r3, r3, #32
 80011ec:	6023      	str	r3, [r4, #0]
 80011ee:	2378      	movs	r3, #120	; 0x78
 80011f0:	4828      	ldr	r0, [pc, #160]	; (8001294 <_printf_i+0x248>)
 80011f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80011f6:	e7e3      	b.n	80011c0 <_printf_i+0x174>
 80011f8:	0659      	lsls	r1, r3, #25
 80011fa:	bf48      	it	mi
 80011fc:	b2b6      	uxthmi	r6, r6
 80011fe:	e7e6      	b.n	80011ce <_printf_i+0x182>
 8001200:	4615      	mov	r5, r2
 8001202:	e7bb      	b.n	800117c <_printf_i+0x130>
 8001204:	682b      	ldr	r3, [r5, #0]
 8001206:	6826      	ldr	r6, [r4, #0]
 8001208:	6961      	ldr	r1, [r4, #20]
 800120a:	1d18      	adds	r0, r3, #4
 800120c:	6028      	str	r0, [r5, #0]
 800120e:	0635      	lsls	r5, r6, #24
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	d501      	bpl.n	8001218 <_printf_i+0x1cc>
 8001214:	6019      	str	r1, [r3, #0]
 8001216:	e002      	b.n	800121e <_printf_i+0x1d2>
 8001218:	0670      	lsls	r0, r6, #25
 800121a:	d5fb      	bpl.n	8001214 <_printf_i+0x1c8>
 800121c:	8019      	strh	r1, [r3, #0]
 800121e:	2300      	movs	r3, #0
 8001220:	6123      	str	r3, [r4, #16]
 8001222:	4615      	mov	r5, r2
 8001224:	e7ba      	b.n	800119c <_printf_i+0x150>
 8001226:	682b      	ldr	r3, [r5, #0]
 8001228:	1d1a      	adds	r2, r3, #4
 800122a:	602a      	str	r2, [r5, #0]
 800122c:	681d      	ldr	r5, [r3, #0]
 800122e:	6862      	ldr	r2, [r4, #4]
 8001230:	2100      	movs	r1, #0
 8001232:	4628      	mov	r0, r5
 8001234:	f7fe ffd4 	bl	80001e0 <memchr>
 8001238:	b108      	cbz	r0, 800123e <_printf_i+0x1f2>
 800123a:	1b40      	subs	r0, r0, r5
 800123c:	6060      	str	r0, [r4, #4]
 800123e:	6863      	ldr	r3, [r4, #4]
 8001240:	6123      	str	r3, [r4, #16]
 8001242:	2300      	movs	r3, #0
 8001244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001248:	e7a8      	b.n	800119c <_printf_i+0x150>
 800124a:	6923      	ldr	r3, [r4, #16]
 800124c:	462a      	mov	r2, r5
 800124e:	4649      	mov	r1, r9
 8001250:	4640      	mov	r0, r8
 8001252:	47d0      	blx	sl
 8001254:	3001      	adds	r0, #1
 8001256:	d0ab      	beq.n	80011b0 <_printf_i+0x164>
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	079b      	lsls	r3, r3, #30
 800125c:	d413      	bmi.n	8001286 <_printf_i+0x23a>
 800125e:	68e0      	ldr	r0, [r4, #12]
 8001260:	9b03      	ldr	r3, [sp, #12]
 8001262:	4298      	cmp	r0, r3
 8001264:	bfb8      	it	lt
 8001266:	4618      	movlt	r0, r3
 8001268:	e7a4      	b.n	80011b4 <_printf_i+0x168>
 800126a:	2301      	movs	r3, #1
 800126c:	4632      	mov	r2, r6
 800126e:	4649      	mov	r1, r9
 8001270:	4640      	mov	r0, r8
 8001272:	47d0      	blx	sl
 8001274:	3001      	adds	r0, #1
 8001276:	d09b      	beq.n	80011b0 <_printf_i+0x164>
 8001278:	3501      	adds	r5, #1
 800127a:	68e3      	ldr	r3, [r4, #12]
 800127c:	9903      	ldr	r1, [sp, #12]
 800127e:	1a5b      	subs	r3, r3, r1
 8001280:	42ab      	cmp	r3, r5
 8001282:	dcf2      	bgt.n	800126a <_printf_i+0x21e>
 8001284:	e7eb      	b.n	800125e <_printf_i+0x212>
 8001286:	2500      	movs	r5, #0
 8001288:	f104 0619 	add.w	r6, r4, #25
 800128c:	e7f5      	b.n	800127a <_printf_i+0x22e>
 800128e:	bf00      	nop
 8001290:	0800197d 	.word	0x0800197d
 8001294:	0800198e 	.word	0x0800198e

08001298 <_sbrk_r>:
 8001298:	b538      	push	{r3, r4, r5, lr}
 800129a:	4d06      	ldr	r5, [pc, #24]	; (80012b4 <_sbrk_r+0x1c>)
 800129c:	2300      	movs	r3, #0
 800129e:	4604      	mov	r4, r0
 80012a0:	4608      	mov	r0, r1
 80012a2:	602b      	str	r3, [r5, #0]
 80012a4:	f7ff fa3e 	bl	8000724 <_sbrk>
 80012a8:	1c43      	adds	r3, r0, #1
 80012aa:	d102      	bne.n	80012b2 <_sbrk_r+0x1a>
 80012ac:	682b      	ldr	r3, [r5, #0]
 80012ae:	b103      	cbz	r3, 80012b2 <_sbrk_r+0x1a>
 80012b0:	6023      	str	r3, [r4, #0]
 80012b2:	bd38      	pop	{r3, r4, r5, pc}
 80012b4:	2000137c 	.word	0x2000137c

080012b8 <__sread>:
 80012b8:	b510      	push	{r4, lr}
 80012ba:	460c      	mov	r4, r1
 80012bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012c0:	f000 fab2 	bl	8001828 <_read_r>
 80012c4:	2800      	cmp	r0, #0
 80012c6:	bfab      	itete	ge
 80012c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80012ca:	89a3      	ldrhlt	r3, [r4, #12]
 80012cc:	181b      	addge	r3, r3, r0
 80012ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80012d2:	bfac      	ite	ge
 80012d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80012d6:	81a3      	strhlt	r3, [r4, #12]
 80012d8:	bd10      	pop	{r4, pc}

080012da <__swrite>:
 80012da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012de:	461f      	mov	r7, r3
 80012e0:	898b      	ldrh	r3, [r1, #12]
 80012e2:	05db      	lsls	r3, r3, #23
 80012e4:	4605      	mov	r5, r0
 80012e6:	460c      	mov	r4, r1
 80012e8:	4616      	mov	r6, r2
 80012ea:	d505      	bpl.n	80012f8 <__swrite+0x1e>
 80012ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012f0:	2302      	movs	r3, #2
 80012f2:	2200      	movs	r2, #0
 80012f4:	f000 f9c8 	bl	8001688 <_lseek_r>
 80012f8:	89a3      	ldrh	r3, [r4, #12]
 80012fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001302:	81a3      	strh	r3, [r4, #12]
 8001304:	4632      	mov	r2, r6
 8001306:	463b      	mov	r3, r7
 8001308:	4628      	mov	r0, r5
 800130a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800130e:	f000 b869 	b.w	80013e4 <_write_r>

08001312 <__sseek>:
 8001312:	b510      	push	{r4, lr}
 8001314:	460c      	mov	r4, r1
 8001316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800131a:	f000 f9b5 	bl	8001688 <_lseek_r>
 800131e:	1c43      	adds	r3, r0, #1
 8001320:	89a3      	ldrh	r3, [r4, #12]
 8001322:	bf15      	itete	ne
 8001324:	6560      	strne	r0, [r4, #84]	; 0x54
 8001326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800132a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800132e:	81a3      	strheq	r3, [r4, #12]
 8001330:	bf18      	it	ne
 8001332:	81a3      	strhne	r3, [r4, #12]
 8001334:	bd10      	pop	{r4, pc}

08001336 <__sclose>:
 8001336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800133a:	f000 b8d3 	b.w	80014e4 <_close_r>
	...

08001340 <__swbuf_r>:
 8001340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001342:	460e      	mov	r6, r1
 8001344:	4614      	mov	r4, r2
 8001346:	4605      	mov	r5, r0
 8001348:	b118      	cbz	r0, 8001352 <__swbuf_r+0x12>
 800134a:	6983      	ldr	r3, [r0, #24]
 800134c:	b90b      	cbnz	r3, 8001352 <__swbuf_r+0x12>
 800134e:	f7ff fb81 	bl	8000a54 <__sinit>
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <__swbuf_r+0x98>)
 8001354:	429c      	cmp	r4, r3
 8001356:	d12b      	bne.n	80013b0 <__swbuf_r+0x70>
 8001358:	686c      	ldr	r4, [r5, #4]
 800135a:	69a3      	ldr	r3, [r4, #24]
 800135c:	60a3      	str	r3, [r4, #8]
 800135e:	89a3      	ldrh	r3, [r4, #12]
 8001360:	071a      	lsls	r2, r3, #28
 8001362:	d52f      	bpl.n	80013c4 <__swbuf_r+0x84>
 8001364:	6923      	ldr	r3, [r4, #16]
 8001366:	b36b      	cbz	r3, 80013c4 <__swbuf_r+0x84>
 8001368:	6923      	ldr	r3, [r4, #16]
 800136a:	6820      	ldr	r0, [r4, #0]
 800136c:	1ac0      	subs	r0, r0, r3
 800136e:	6963      	ldr	r3, [r4, #20]
 8001370:	b2f6      	uxtb	r6, r6
 8001372:	4283      	cmp	r3, r0
 8001374:	4637      	mov	r7, r6
 8001376:	dc04      	bgt.n	8001382 <__swbuf_r+0x42>
 8001378:	4621      	mov	r1, r4
 800137a:	4628      	mov	r0, r5
 800137c:	f000 f948 	bl	8001610 <_fflush_r>
 8001380:	bb30      	cbnz	r0, 80013d0 <__swbuf_r+0x90>
 8001382:	68a3      	ldr	r3, [r4, #8]
 8001384:	3b01      	subs	r3, #1
 8001386:	60a3      	str	r3, [r4, #8]
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	6022      	str	r2, [r4, #0]
 800138e:	701e      	strb	r6, [r3, #0]
 8001390:	6963      	ldr	r3, [r4, #20]
 8001392:	3001      	adds	r0, #1
 8001394:	4283      	cmp	r3, r0
 8001396:	d004      	beq.n	80013a2 <__swbuf_r+0x62>
 8001398:	89a3      	ldrh	r3, [r4, #12]
 800139a:	07db      	lsls	r3, r3, #31
 800139c:	d506      	bpl.n	80013ac <__swbuf_r+0x6c>
 800139e:	2e0a      	cmp	r6, #10
 80013a0:	d104      	bne.n	80013ac <__swbuf_r+0x6c>
 80013a2:	4621      	mov	r1, r4
 80013a4:	4628      	mov	r0, r5
 80013a6:	f000 f933 	bl	8001610 <_fflush_r>
 80013aa:	b988      	cbnz	r0, 80013d0 <__swbuf_r+0x90>
 80013ac:	4638      	mov	r0, r7
 80013ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <__swbuf_r+0x9c>)
 80013b2:	429c      	cmp	r4, r3
 80013b4:	d101      	bne.n	80013ba <__swbuf_r+0x7a>
 80013b6:	68ac      	ldr	r4, [r5, #8]
 80013b8:	e7cf      	b.n	800135a <__swbuf_r+0x1a>
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <__swbuf_r+0xa0>)
 80013bc:	429c      	cmp	r4, r3
 80013be:	bf08      	it	eq
 80013c0:	68ec      	ldreq	r4, [r5, #12]
 80013c2:	e7ca      	b.n	800135a <__swbuf_r+0x1a>
 80013c4:	4621      	mov	r1, r4
 80013c6:	4628      	mov	r0, r5
 80013c8:	f000 f81e 	bl	8001408 <__swsetup_r>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d0cb      	beq.n	8001368 <__swbuf_r+0x28>
 80013d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80013d4:	e7ea      	b.n	80013ac <__swbuf_r+0x6c>
 80013d6:	bf00      	nop
 80013d8:	0800192c 	.word	0x0800192c
 80013dc:	0800194c 	.word	0x0800194c
 80013e0:	0800190c 	.word	0x0800190c

080013e4 <_write_r>:
 80013e4:	b538      	push	{r3, r4, r5, lr}
 80013e6:	4d07      	ldr	r5, [pc, #28]	; (8001404 <_write_r+0x20>)
 80013e8:	4604      	mov	r4, r0
 80013ea:	4608      	mov	r0, r1
 80013ec:	4611      	mov	r1, r2
 80013ee:	2200      	movs	r2, #0
 80013f0:	602a      	str	r2, [r5, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	f7ff f945 	bl	8000682 <_write>
 80013f8:	1c43      	adds	r3, r0, #1
 80013fa:	d102      	bne.n	8001402 <_write_r+0x1e>
 80013fc:	682b      	ldr	r3, [r5, #0]
 80013fe:	b103      	cbz	r3, 8001402 <_write_r+0x1e>
 8001400:	6023      	str	r3, [r4, #0]
 8001402:	bd38      	pop	{r3, r4, r5, pc}
 8001404:	2000137c 	.word	0x2000137c

08001408 <__swsetup_r>:
 8001408:	4b32      	ldr	r3, [pc, #200]	; (80014d4 <__swsetup_r+0xcc>)
 800140a:	b570      	push	{r4, r5, r6, lr}
 800140c:	681d      	ldr	r5, [r3, #0]
 800140e:	4606      	mov	r6, r0
 8001410:	460c      	mov	r4, r1
 8001412:	b125      	cbz	r5, 800141e <__swsetup_r+0x16>
 8001414:	69ab      	ldr	r3, [r5, #24]
 8001416:	b913      	cbnz	r3, 800141e <__swsetup_r+0x16>
 8001418:	4628      	mov	r0, r5
 800141a:	f7ff fb1b 	bl	8000a54 <__sinit>
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <__swsetup_r+0xd0>)
 8001420:	429c      	cmp	r4, r3
 8001422:	d10f      	bne.n	8001444 <__swsetup_r+0x3c>
 8001424:	686c      	ldr	r4, [r5, #4]
 8001426:	89a3      	ldrh	r3, [r4, #12]
 8001428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800142c:	0719      	lsls	r1, r3, #28
 800142e:	d42c      	bmi.n	800148a <__swsetup_r+0x82>
 8001430:	06dd      	lsls	r5, r3, #27
 8001432:	d411      	bmi.n	8001458 <__swsetup_r+0x50>
 8001434:	2309      	movs	r3, #9
 8001436:	6033      	str	r3, [r6, #0]
 8001438:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800143c:	81a3      	strh	r3, [r4, #12]
 800143e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001442:	e03e      	b.n	80014c2 <__swsetup_r+0xba>
 8001444:	4b25      	ldr	r3, [pc, #148]	; (80014dc <__swsetup_r+0xd4>)
 8001446:	429c      	cmp	r4, r3
 8001448:	d101      	bne.n	800144e <__swsetup_r+0x46>
 800144a:	68ac      	ldr	r4, [r5, #8]
 800144c:	e7eb      	b.n	8001426 <__swsetup_r+0x1e>
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <__swsetup_r+0xd8>)
 8001450:	429c      	cmp	r4, r3
 8001452:	bf08      	it	eq
 8001454:	68ec      	ldreq	r4, [r5, #12]
 8001456:	e7e6      	b.n	8001426 <__swsetup_r+0x1e>
 8001458:	0758      	lsls	r0, r3, #29
 800145a:	d512      	bpl.n	8001482 <__swsetup_r+0x7a>
 800145c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800145e:	b141      	cbz	r1, 8001472 <__swsetup_r+0x6a>
 8001460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001464:	4299      	cmp	r1, r3
 8001466:	d002      	beq.n	800146e <__swsetup_r+0x66>
 8001468:	4630      	mov	r0, r6
 800146a:	f000 f991 	bl	8001790 <_free_r>
 800146e:	2300      	movs	r3, #0
 8001470:	6363      	str	r3, [r4, #52]	; 0x34
 8001472:	89a3      	ldrh	r3, [r4, #12]
 8001474:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001478:	81a3      	strh	r3, [r4, #12]
 800147a:	2300      	movs	r3, #0
 800147c:	6063      	str	r3, [r4, #4]
 800147e:	6923      	ldr	r3, [r4, #16]
 8001480:	6023      	str	r3, [r4, #0]
 8001482:	89a3      	ldrh	r3, [r4, #12]
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	81a3      	strh	r3, [r4, #12]
 800148a:	6923      	ldr	r3, [r4, #16]
 800148c:	b94b      	cbnz	r3, 80014a2 <__swsetup_r+0x9a>
 800148e:	89a3      	ldrh	r3, [r4, #12]
 8001490:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001498:	d003      	beq.n	80014a2 <__swsetup_r+0x9a>
 800149a:	4621      	mov	r1, r4
 800149c:	4630      	mov	r0, r6
 800149e:	f000 f92b 	bl	80016f8 <__smakebuf_r>
 80014a2:	89a0      	ldrh	r0, [r4, #12]
 80014a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014a8:	f010 0301 	ands.w	r3, r0, #1
 80014ac:	d00a      	beq.n	80014c4 <__swsetup_r+0xbc>
 80014ae:	2300      	movs	r3, #0
 80014b0:	60a3      	str	r3, [r4, #8]
 80014b2:	6963      	ldr	r3, [r4, #20]
 80014b4:	425b      	negs	r3, r3
 80014b6:	61a3      	str	r3, [r4, #24]
 80014b8:	6923      	ldr	r3, [r4, #16]
 80014ba:	b943      	cbnz	r3, 80014ce <__swsetup_r+0xc6>
 80014bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80014c0:	d1ba      	bne.n	8001438 <__swsetup_r+0x30>
 80014c2:	bd70      	pop	{r4, r5, r6, pc}
 80014c4:	0781      	lsls	r1, r0, #30
 80014c6:	bf58      	it	pl
 80014c8:	6963      	ldrpl	r3, [r4, #20]
 80014ca:	60a3      	str	r3, [r4, #8]
 80014cc:	e7f4      	b.n	80014b8 <__swsetup_r+0xb0>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7f7      	b.n	80014c2 <__swsetup_r+0xba>
 80014d2:	bf00      	nop
 80014d4:	20000000 	.word	0x20000000
 80014d8:	0800192c 	.word	0x0800192c
 80014dc:	0800194c 	.word	0x0800194c
 80014e0:	0800190c 	.word	0x0800190c

080014e4 <_close_r>:
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4d06      	ldr	r5, [pc, #24]	; (8001500 <_close_r+0x1c>)
 80014e8:	2300      	movs	r3, #0
 80014ea:	4604      	mov	r4, r0
 80014ec:	4608      	mov	r0, r1
 80014ee:	602b      	str	r3, [r5, #0]
 80014f0:	f7ff f8e3 	bl	80006ba <_close>
 80014f4:	1c43      	adds	r3, r0, #1
 80014f6:	d102      	bne.n	80014fe <_close_r+0x1a>
 80014f8:	682b      	ldr	r3, [r5, #0]
 80014fa:	b103      	cbz	r3, 80014fe <_close_r+0x1a>
 80014fc:	6023      	str	r3, [r4, #0]
 80014fe:	bd38      	pop	{r3, r4, r5, pc}
 8001500:	2000137c 	.word	0x2000137c

08001504 <__sflush_r>:
 8001504:	898a      	ldrh	r2, [r1, #12]
 8001506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800150a:	4605      	mov	r5, r0
 800150c:	0710      	lsls	r0, r2, #28
 800150e:	460c      	mov	r4, r1
 8001510:	d458      	bmi.n	80015c4 <__sflush_r+0xc0>
 8001512:	684b      	ldr	r3, [r1, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	dc05      	bgt.n	8001524 <__sflush_r+0x20>
 8001518:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800151a:	2b00      	cmp	r3, #0
 800151c:	dc02      	bgt.n	8001524 <__sflush_r+0x20>
 800151e:	2000      	movs	r0, #0
 8001520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001524:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001526:	2e00      	cmp	r6, #0
 8001528:	d0f9      	beq.n	800151e <__sflush_r+0x1a>
 800152a:	2300      	movs	r3, #0
 800152c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001530:	682f      	ldr	r7, [r5, #0]
 8001532:	602b      	str	r3, [r5, #0]
 8001534:	d032      	beq.n	800159c <__sflush_r+0x98>
 8001536:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001538:	89a3      	ldrh	r3, [r4, #12]
 800153a:	075a      	lsls	r2, r3, #29
 800153c:	d505      	bpl.n	800154a <__sflush_r+0x46>
 800153e:	6863      	ldr	r3, [r4, #4]
 8001540:	1ac0      	subs	r0, r0, r3
 8001542:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001544:	b10b      	cbz	r3, 800154a <__sflush_r+0x46>
 8001546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001548:	1ac0      	subs	r0, r0, r3
 800154a:	2300      	movs	r3, #0
 800154c:	4602      	mov	r2, r0
 800154e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001550:	6a21      	ldr	r1, [r4, #32]
 8001552:	4628      	mov	r0, r5
 8001554:	47b0      	blx	r6
 8001556:	1c43      	adds	r3, r0, #1
 8001558:	89a3      	ldrh	r3, [r4, #12]
 800155a:	d106      	bne.n	800156a <__sflush_r+0x66>
 800155c:	6829      	ldr	r1, [r5, #0]
 800155e:	291d      	cmp	r1, #29
 8001560:	d82c      	bhi.n	80015bc <__sflush_r+0xb8>
 8001562:	4a2a      	ldr	r2, [pc, #168]	; (800160c <__sflush_r+0x108>)
 8001564:	40ca      	lsrs	r2, r1
 8001566:	07d6      	lsls	r6, r2, #31
 8001568:	d528      	bpl.n	80015bc <__sflush_r+0xb8>
 800156a:	2200      	movs	r2, #0
 800156c:	6062      	str	r2, [r4, #4]
 800156e:	04d9      	lsls	r1, r3, #19
 8001570:	6922      	ldr	r2, [r4, #16]
 8001572:	6022      	str	r2, [r4, #0]
 8001574:	d504      	bpl.n	8001580 <__sflush_r+0x7c>
 8001576:	1c42      	adds	r2, r0, #1
 8001578:	d101      	bne.n	800157e <__sflush_r+0x7a>
 800157a:	682b      	ldr	r3, [r5, #0]
 800157c:	b903      	cbnz	r3, 8001580 <__sflush_r+0x7c>
 800157e:	6560      	str	r0, [r4, #84]	; 0x54
 8001580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001582:	602f      	str	r7, [r5, #0]
 8001584:	2900      	cmp	r1, #0
 8001586:	d0ca      	beq.n	800151e <__sflush_r+0x1a>
 8001588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800158c:	4299      	cmp	r1, r3
 800158e:	d002      	beq.n	8001596 <__sflush_r+0x92>
 8001590:	4628      	mov	r0, r5
 8001592:	f000 f8fd 	bl	8001790 <_free_r>
 8001596:	2000      	movs	r0, #0
 8001598:	6360      	str	r0, [r4, #52]	; 0x34
 800159a:	e7c1      	b.n	8001520 <__sflush_r+0x1c>
 800159c:	6a21      	ldr	r1, [r4, #32]
 800159e:	2301      	movs	r3, #1
 80015a0:	4628      	mov	r0, r5
 80015a2:	47b0      	blx	r6
 80015a4:	1c41      	adds	r1, r0, #1
 80015a6:	d1c7      	bne.n	8001538 <__sflush_r+0x34>
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0c4      	beq.n	8001538 <__sflush_r+0x34>
 80015ae:	2b1d      	cmp	r3, #29
 80015b0:	d001      	beq.n	80015b6 <__sflush_r+0xb2>
 80015b2:	2b16      	cmp	r3, #22
 80015b4:	d101      	bne.n	80015ba <__sflush_r+0xb6>
 80015b6:	602f      	str	r7, [r5, #0]
 80015b8:	e7b1      	b.n	800151e <__sflush_r+0x1a>
 80015ba:	89a3      	ldrh	r3, [r4, #12]
 80015bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c0:	81a3      	strh	r3, [r4, #12]
 80015c2:	e7ad      	b.n	8001520 <__sflush_r+0x1c>
 80015c4:	690f      	ldr	r7, [r1, #16]
 80015c6:	2f00      	cmp	r7, #0
 80015c8:	d0a9      	beq.n	800151e <__sflush_r+0x1a>
 80015ca:	0793      	lsls	r3, r2, #30
 80015cc:	680e      	ldr	r6, [r1, #0]
 80015ce:	bf08      	it	eq
 80015d0:	694b      	ldreq	r3, [r1, #20]
 80015d2:	600f      	str	r7, [r1, #0]
 80015d4:	bf18      	it	ne
 80015d6:	2300      	movne	r3, #0
 80015d8:	eba6 0807 	sub.w	r8, r6, r7
 80015dc:	608b      	str	r3, [r1, #8]
 80015de:	f1b8 0f00 	cmp.w	r8, #0
 80015e2:	dd9c      	ble.n	800151e <__sflush_r+0x1a>
 80015e4:	6a21      	ldr	r1, [r4, #32]
 80015e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80015e8:	4643      	mov	r3, r8
 80015ea:	463a      	mov	r2, r7
 80015ec:	4628      	mov	r0, r5
 80015ee:	47b0      	blx	r6
 80015f0:	2800      	cmp	r0, #0
 80015f2:	dc06      	bgt.n	8001602 <__sflush_r+0xfe>
 80015f4:	89a3      	ldrh	r3, [r4, #12]
 80015f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015fa:	81a3      	strh	r3, [r4, #12]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001600:	e78e      	b.n	8001520 <__sflush_r+0x1c>
 8001602:	4407      	add	r7, r0
 8001604:	eba8 0800 	sub.w	r8, r8, r0
 8001608:	e7e9      	b.n	80015de <__sflush_r+0xda>
 800160a:	bf00      	nop
 800160c:	20400001 	.word	0x20400001

08001610 <_fflush_r>:
 8001610:	b538      	push	{r3, r4, r5, lr}
 8001612:	690b      	ldr	r3, [r1, #16]
 8001614:	4605      	mov	r5, r0
 8001616:	460c      	mov	r4, r1
 8001618:	b913      	cbnz	r3, 8001620 <_fflush_r+0x10>
 800161a:	2500      	movs	r5, #0
 800161c:	4628      	mov	r0, r5
 800161e:	bd38      	pop	{r3, r4, r5, pc}
 8001620:	b118      	cbz	r0, 800162a <_fflush_r+0x1a>
 8001622:	6983      	ldr	r3, [r0, #24]
 8001624:	b90b      	cbnz	r3, 800162a <_fflush_r+0x1a>
 8001626:	f7ff fa15 	bl	8000a54 <__sinit>
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <_fflush_r+0x6c>)
 800162c:	429c      	cmp	r4, r3
 800162e:	d11b      	bne.n	8001668 <_fflush_r+0x58>
 8001630:	686c      	ldr	r4, [r5, #4]
 8001632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0ef      	beq.n	800161a <_fflush_r+0xa>
 800163a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800163c:	07d0      	lsls	r0, r2, #31
 800163e:	d404      	bmi.n	800164a <_fflush_r+0x3a>
 8001640:	0599      	lsls	r1, r3, #22
 8001642:	d402      	bmi.n	800164a <_fflush_r+0x3a>
 8001644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001646:	f7ff faa3 	bl	8000b90 <__retarget_lock_acquire_recursive>
 800164a:	4628      	mov	r0, r5
 800164c:	4621      	mov	r1, r4
 800164e:	f7ff ff59 	bl	8001504 <__sflush_r>
 8001652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001654:	07da      	lsls	r2, r3, #31
 8001656:	4605      	mov	r5, r0
 8001658:	d4e0      	bmi.n	800161c <_fflush_r+0xc>
 800165a:	89a3      	ldrh	r3, [r4, #12]
 800165c:	059b      	lsls	r3, r3, #22
 800165e:	d4dd      	bmi.n	800161c <_fflush_r+0xc>
 8001660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001662:	f7ff fa96 	bl	8000b92 <__retarget_lock_release_recursive>
 8001666:	e7d9      	b.n	800161c <_fflush_r+0xc>
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <_fflush_r+0x70>)
 800166a:	429c      	cmp	r4, r3
 800166c:	d101      	bne.n	8001672 <_fflush_r+0x62>
 800166e:	68ac      	ldr	r4, [r5, #8]
 8001670:	e7df      	b.n	8001632 <_fflush_r+0x22>
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <_fflush_r+0x74>)
 8001674:	429c      	cmp	r4, r3
 8001676:	bf08      	it	eq
 8001678:	68ec      	ldreq	r4, [r5, #12]
 800167a:	e7da      	b.n	8001632 <_fflush_r+0x22>
 800167c:	0800192c 	.word	0x0800192c
 8001680:	0800194c 	.word	0x0800194c
 8001684:	0800190c 	.word	0x0800190c

08001688 <_lseek_r>:
 8001688:	b538      	push	{r3, r4, r5, lr}
 800168a:	4d07      	ldr	r5, [pc, #28]	; (80016a8 <_lseek_r+0x20>)
 800168c:	4604      	mov	r4, r0
 800168e:	4608      	mov	r0, r1
 8001690:	4611      	mov	r1, r2
 8001692:	2200      	movs	r2, #0
 8001694:	602a      	str	r2, [r5, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	f7ff f836 	bl	8000708 <_lseek>
 800169c:	1c43      	adds	r3, r0, #1
 800169e:	d102      	bne.n	80016a6 <_lseek_r+0x1e>
 80016a0:	682b      	ldr	r3, [r5, #0]
 80016a2:	b103      	cbz	r3, 80016a6 <_lseek_r+0x1e>
 80016a4:	6023      	str	r3, [r4, #0]
 80016a6:	bd38      	pop	{r3, r4, r5, pc}
 80016a8:	2000137c 	.word	0x2000137c

080016ac <__swhatbuf_r>:
 80016ac:	b570      	push	{r4, r5, r6, lr}
 80016ae:	460e      	mov	r6, r1
 80016b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016b4:	2900      	cmp	r1, #0
 80016b6:	b096      	sub	sp, #88	; 0x58
 80016b8:	4614      	mov	r4, r2
 80016ba:	461d      	mov	r5, r3
 80016bc:	da08      	bge.n	80016d0 <__swhatbuf_r+0x24>
 80016be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	602a      	str	r2, [r5, #0]
 80016c6:	061a      	lsls	r2, r3, #24
 80016c8:	d410      	bmi.n	80016ec <__swhatbuf_r+0x40>
 80016ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ce:	e00e      	b.n	80016ee <__swhatbuf_r+0x42>
 80016d0:	466a      	mov	r2, sp
 80016d2:	f000 f8bb 	bl	800184c <_fstat_r>
 80016d6:	2800      	cmp	r0, #0
 80016d8:	dbf1      	blt.n	80016be <__swhatbuf_r+0x12>
 80016da:	9a01      	ldr	r2, [sp, #4]
 80016dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80016e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80016e4:	425a      	negs	r2, r3
 80016e6:	415a      	adcs	r2, r3
 80016e8:	602a      	str	r2, [r5, #0]
 80016ea:	e7ee      	b.n	80016ca <__swhatbuf_r+0x1e>
 80016ec:	2340      	movs	r3, #64	; 0x40
 80016ee:	2000      	movs	r0, #0
 80016f0:	6023      	str	r3, [r4, #0]
 80016f2:	b016      	add	sp, #88	; 0x58
 80016f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080016f8 <__smakebuf_r>:
 80016f8:	898b      	ldrh	r3, [r1, #12]
 80016fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016fc:	079d      	lsls	r5, r3, #30
 80016fe:	4606      	mov	r6, r0
 8001700:	460c      	mov	r4, r1
 8001702:	d507      	bpl.n	8001714 <__smakebuf_r+0x1c>
 8001704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001708:	6023      	str	r3, [r4, #0]
 800170a:	6123      	str	r3, [r4, #16]
 800170c:	2301      	movs	r3, #1
 800170e:	6163      	str	r3, [r4, #20]
 8001710:	b002      	add	sp, #8
 8001712:	bd70      	pop	{r4, r5, r6, pc}
 8001714:	ab01      	add	r3, sp, #4
 8001716:	466a      	mov	r2, sp
 8001718:	f7ff ffc8 	bl	80016ac <__swhatbuf_r>
 800171c:	9900      	ldr	r1, [sp, #0]
 800171e:	4605      	mov	r5, r0
 8001720:	4630      	mov	r0, r6
 8001722:	f7ff fa57 	bl	8000bd4 <_malloc_r>
 8001726:	b948      	cbnz	r0, 800173c <__smakebuf_r+0x44>
 8001728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800172c:	059a      	lsls	r2, r3, #22
 800172e:	d4ef      	bmi.n	8001710 <__smakebuf_r+0x18>
 8001730:	f023 0303 	bic.w	r3, r3, #3
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	81a3      	strh	r3, [r4, #12]
 800173a:	e7e3      	b.n	8001704 <__smakebuf_r+0xc>
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <__smakebuf_r+0x7c>)
 800173e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001740:	89a3      	ldrh	r3, [r4, #12]
 8001742:	6020      	str	r0, [r4, #0]
 8001744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001748:	81a3      	strh	r3, [r4, #12]
 800174a:	9b00      	ldr	r3, [sp, #0]
 800174c:	6163      	str	r3, [r4, #20]
 800174e:	9b01      	ldr	r3, [sp, #4]
 8001750:	6120      	str	r0, [r4, #16]
 8001752:	b15b      	cbz	r3, 800176c <__smakebuf_r+0x74>
 8001754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001758:	4630      	mov	r0, r6
 800175a:	f000 f889 	bl	8001870 <_isatty_r>
 800175e:	b128      	cbz	r0, 800176c <__smakebuf_r+0x74>
 8001760:	89a3      	ldrh	r3, [r4, #12]
 8001762:	f023 0303 	bic.w	r3, r3, #3
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	81a3      	strh	r3, [r4, #12]
 800176c:	89a0      	ldrh	r0, [r4, #12]
 800176e:	4305      	orrs	r5, r0
 8001770:	81a5      	strh	r5, [r4, #12]
 8001772:	e7cd      	b.n	8001710 <__smakebuf_r+0x18>
 8001774:	080009ed 	.word	0x080009ed

08001778 <__malloc_lock>:
 8001778:	4801      	ldr	r0, [pc, #4]	; (8001780 <__malloc_lock+0x8>)
 800177a:	f7ff ba09 	b.w	8000b90 <__retarget_lock_acquire_recursive>
 800177e:	bf00      	nop
 8001780:	20001370 	.word	0x20001370

08001784 <__malloc_unlock>:
 8001784:	4801      	ldr	r0, [pc, #4]	; (800178c <__malloc_unlock+0x8>)
 8001786:	f7ff ba04 	b.w	8000b92 <__retarget_lock_release_recursive>
 800178a:	bf00      	nop
 800178c:	20001370 	.word	0x20001370

08001790 <_free_r>:
 8001790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001792:	2900      	cmp	r1, #0
 8001794:	d044      	beq.n	8001820 <_free_r+0x90>
 8001796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800179a:	9001      	str	r0, [sp, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	f1a1 0404 	sub.w	r4, r1, #4
 80017a2:	bfb8      	it	lt
 80017a4:	18e4      	addlt	r4, r4, r3
 80017a6:	f7ff ffe7 	bl	8001778 <__malloc_lock>
 80017aa:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <_free_r+0x94>)
 80017ac:	9801      	ldr	r0, [sp, #4]
 80017ae:	6813      	ldr	r3, [r2, #0]
 80017b0:	b933      	cbnz	r3, 80017c0 <_free_r+0x30>
 80017b2:	6063      	str	r3, [r4, #4]
 80017b4:	6014      	str	r4, [r2, #0]
 80017b6:	b003      	add	sp, #12
 80017b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80017bc:	f7ff bfe2 	b.w	8001784 <__malloc_unlock>
 80017c0:	42a3      	cmp	r3, r4
 80017c2:	d908      	bls.n	80017d6 <_free_r+0x46>
 80017c4:	6825      	ldr	r5, [r4, #0]
 80017c6:	1961      	adds	r1, r4, r5
 80017c8:	428b      	cmp	r3, r1
 80017ca:	bf01      	itttt	eq
 80017cc:	6819      	ldreq	r1, [r3, #0]
 80017ce:	685b      	ldreq	r3, [r3, #4]
 80017d0:	1949      	addeq	r1, r1, r5
 80017d2:	6021      	streq	r1, [r4, #0]
 80017d4:	e7ed      	b.n	80017b2 <_free_r+0x22>
 80017d6:	461a      	mov	r2, r3
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	b10b      	cbz	r3, 80017e0 <_free_r+0x50>
 80017dc:	42a3      	cmp	r3, r4
 80017de:	d9fa      	bls.n	80017d6 <_free_r+0x46>
 80017e0:	6811      	ldr	r1, [r2, #0]
 80017e2:	1855      	adds	r5, r2, r1
 80017e4:	42a5      	cmp	r5, r4
 80017e6:	d10b      	bne.n	8001800 <_free_r+0x70>
 80017e8:	6824      	ldr	r4, [r4, #0]
 80017ea:	4421      	add	r1, r4
 80017ec:	1854      	adds	r4, r2, r1
 80017ee:	42a3      	cmp	r3, r4
 80017f0:	6011      	str	r1, [r2, #0]
 80017f2:	d1e0      	bne.n	80017b6 <_free_r+0x26>
 80017f4:	681c      	ldr	r4, [r3, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	6053      	str	r3, [r2, #4]
 80017fa:	4421      	add	r1, r4
 80017fc:	6011      	str	r1, [r2, #0]
 80017fe:	e7da      	b.n	80017b6 <_free_r+0x26>
 8001800:	d902      	bls.n	8001808 <_free_r+0x78>
 8001802:	230c      	movs	r3, #12
 8001804:	6003      	str	r3, [r0, #0]
 8001806:	e7d6      	b.n	80017b6 <_free_r+0x26>
 8001808:	6825      	ldr	r5, [r4, #0]
 800180a:	1961      	adds	r1, r4, r5
 800180c:	428b      	cmp	r3, r1
 800180e:	bf04      	itt	eq
 8001810:	6819      	ldreq	r1, [r3, #0]
 8001812:	685b      	ldreq	r3, [r3, #4]
 8001814:	6063      	str	r3, [r4, #4]
 8001816:	bf04      	itt	eq
 8001818:	1949      	addeq	r1, r1, r5
 800181a:	6021      	streq	r1, [r4, #0]
 800181c:	6054      	str	r4, [r2, #4]
 800181e:	e7ca      	b.n	80017b6 <_free_r+0x26>
 8001820:	b003      	add	sp, #12
 8001822:	bd30      	pop	{r4, r5, pc}
 8001824:	20001374 	.word	0x20001374

08001828 <_read_r>:
 8001828:	b538      	push	{r3, r4, r5, lr}
 800182a:	4d07      	ldr	r5, [pc, #28]	; (8001848 <_read_r+0x20>)
 800182c:	4604      	mov	r4, r0
 800182e:	4608      	mov	r0, r1
 8001830:	4611      	mov	r1, r2
 8001832:	2200      	movs	r2, #0
 8001834:	602a      	str	r2, [r5, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	f7fe ff06 	bl	8000648 <_read>
 800183c:	1c43      	adds	r3, r0, #1
 800183e:	d102      	bne.n	8001846 <_read_r+0x1e>
 8001840:	682b      	ldr	r3, [r5, #0]
 8001842:	b103      	cbz	r3, 8001846 <_read_r+0x1e>
 8001844:	6023      	str	r3, [r4, #0]
 8001846:	bd38      	pop	{r3, r4, r5, pc}
 8001848:	2000137c 	.word	0x2000137c

0800184c <_fstat_r>:
 800184c:	b538      	push	{r3, r4, r5, lr}
 800184e:	4d07      	ldr	r5, [pc, #28]	; (800186c <_fstat_r+0x20>)
 8001850:	2300      	movs	r3, #0
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	602b      	str	r3, [r5, #0]
 800185a:	f7fe ff3a 	bl	80006d2 <_fstat>
 800185e:	1c43      	adds	r3, r0, #1
 8001860:	d102      	bne.n	8001868 <_fstat_r+0x1c>
 8001862:	682b      	ldr	r3, [r5, #0]
 8001864:	b103      	cbz	r3, 8001868 <_fstat_r+0x1c>
 8001866:	6023      	str	r3, [r4, #0]
 8001868:	bd38      	pop	{r3, r4, r5, pc}
 800186a:	bf00      	nop
 800186c:	2000137c 	.word	0x2000137c

08001870 <_isatty_r>:
 8001870:	b538      	push	{r3, r4, r5, lr}
 8001872:	4d06      	ldr	r5, [pc, #24]	; (800188c <_isatty_r+0x1c>)
 8001874:	2300      	movs	r3, #0
 8001876:	4604      	mov	r4, r0
 8001878:	4608      	mov	r0, r1
 800187a:	602b      	str	r3, [r5, #0]
 800187c:	f7fe ff39 	bl	80006f2 <_isatty>
 8001880:	1c43      	adds	r3, r0, #1
 8001882:	d102      	bne.n	800188a <_isatty_r+0x1a>
 8001884:	682b      	ldr	r3, [r5, #0]
 8001886:	b103      	cbz	r3, 800188a <_isatty_r+0x1a>
 8001888:	6023      	str	r3, [r4, #0]
 800188a:	bd38      	pop	{r3, r4, r5, pc}
 800188c:	2000137c 	.word	0x2000137c

08001890 <_init>:
 8001890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001892:	bf00      	nop
 8001894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001896:	bc08      	pop	{r3}
 8001898:	469e      	mov	lr, r3
 800189a:	4770      	bx	lr

0800189c <_fini>:
 800189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189e:	bf00      	nop
 80018a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018a2:	bc08      	pop	{r3}
 80018a4:	469e      	mov	lr, r3
 80018a6:	4770      	bx	lr
